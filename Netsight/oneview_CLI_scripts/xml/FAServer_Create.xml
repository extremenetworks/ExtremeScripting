<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<script name="Fabric Attach Server Config">
    <auditLogEnabled></auditLogEnabled>
    <cacheDate>1557731994174</cacheDate>
    <category>,Fabric Connect,</category>
    <comments>Creates and Configures FA on a BEB</comments>
    <content>'''
Python Scripts provided by Extreme Networks.

This script is provided free of charge by Extreme.  We hope such scripts are
helpful when used in conjunction with Extreme products and technology;
however, scripts are provided simply as an accommodation and are not
supported nor maintained by Extreme.  ANY SCRIPTS PROVIDED BY EXTREME ARE
HEREBY PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL EXTREME OR ITS
THIRD PARTY LICENSORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
IN CONNECTION WITH THE USE OR DISTRIBUTION OF SUCH SCRIPTS.

This script creates and configures Fabric Attach on an FA Server (VOSS).

This script vastly uses functions and logic taken from Ludo Standard Library v1.7

Several checks are performed to try to avoid mistakes.
'''

try:
    emc_vars
except: # If not running on XMC Jython...
    raise RuntimeError('This script must be used with XMC')

# IMPORTS
import re

# VARIABLES:
Debug = False
Sanity = False
RegexPrompt = re.compile('.*[\?\$%#&gt;]\s?$')
RegexError  = re.compile(
    '^%|\x07|error|invalid|cannot|unable|bad|not found|not exist|not allowed|no such|already exist|must be|out of range|incomplete|failed|denied|can\'t|ambiguous|do not|unrecognized',
    re.IGNORECASE
)
RegexPort = re.compile('^(?:[1-9]\d?[/:])?\d+$')
RegexPortRange = re.compile('^(?:([1-9]\d?)([/:]))?(\d+)-(?:([1-9]\d?)[/:])?(\d+)$')
RegexContextPatterns = { # Ported from acli.pl
    'ERS Series' : [
        re.compile('^(?:interface |router \w+$|route-map (?:\"[\w\d\s\.\+-]+\"|[\w\d\.-]+) \d+$|ip igmp profile \d+$|wireless|application|ipv6 dhcp guard policy |ipv6 nd raguard policy )'), # level0
        re.compile('^(?:security|crypto|ap-profile |captive-portal |network-profile |radio-profile )'), # level1
        re.compile('^(?:locale)'), # level2
    ],
    'VSP Series' : [
        re.compile('^ *(?:interface |router \w+$|router vrf|route-map (?:\"[\w\d\s\.\+-]+\"|[\w\d\.-]+) \d+$|application|i-sid \d+|wireless|logical-intf isis \d+|mgmt [\dcvo]|ovsdb$)'), # level0
        re.compile('^ *(?:route-map (?:\"[\w\d\s\.\+-]+\"|[\w\d\.-]+) \d+$)'), # level1
    ],
}
RegexExitInstance = re.compile('^ *(?:exit|back|end)(?:\s|$)')
Indent = 3 # Number of space characters for each indentation
LastError = None
ConfigHistory = []

def cleanOutput(outputStr): # Remove echoed command and final prompt from output
    lastLine = outputStr.splitlines()[-1:][0]
    if RegexPrompt.match(lastLine):
        lines = outputStr.splitlines()[1:-1]
    else:
        lines = outputStr.splitlines()[1:]
    return '\n'.join(lines)

def sendCLI_showCommand(cmd, returnCliError=False, msgOnError=None): # Send a CLI show command; return output
    global LastError
    resultObj = emc_cli.send(cmd)
    if resultObj.isSuccess():
        outputStr = cleanOutput(resultObj.getOutput())
        if outputStr and RegexError.search("\n".join(outputStr.split("\n")[:2])): # If there is output, check for error in 1st 2 lines only
            if returnCliError: # If we asked to return upon CLI error, then the error message will be held in LastError
                LastError = outputStr
                if msgOnError:
                    print "==&gt; Ignoring above error: {}\n\n".format(msgOnError)
                return None
            raise RuntimeError(outputStr)
        else:
            LastError = None
            return outputStr
    else:
        raise RuntimeError(resultObj.getError())

def sendCLI_NoError_showCommand(cmd, returnCliError=False, msgOnError=None): # Send a CLI show command; return output
    resultObj = emc_cli.send(cmd)
    if resultObj.isSuccess():
        outputStr = cleanOutput(resultObj.getOutput())
        return outputStr
    else:
        raise RuntimeError(resultObj.getError())

def sendCLI_configCommand(cmd, returnCliError=False, msgOnError=None): # Send a CLI config command
    global LastError
    if Sanity:
        print "SANITY&gt; {}".format(cmd)
        ConfigHistory.append(cmd)
        LastError = None
        return True
    resultObj = emc_cli.send(cmd)
    if resultObj.isSuccess():
        outputStr = cleanOutput(resultObj.getOutput())
        if outputStr and RegexError.search("\n".join(outputStr.split("\n")[:2])): # If there is output, check for error in 1st 2 lines only
            if returnCliError: # If we asked to return upon CLI error, then the error message will be held in LastError
                LastError = outputStr
                if msgOnError:
                    print "==&gt; Ignoring above error: {}\n\n".format(msgOnError)
                return False
            raise RuntimeError(outputStr)
        else:
            ConfigHistory.append(cmd)
            LastError = None
            return True
    else:
        raise RuntimeError(resultObj.getError())

def sendCLI_configChain(chainStr, returnCliError=False, msgOnError=None): # Send a semi-colon separated list of config commands
    cmds = map(str.strip, re.split(r'[;\n]', chainStr))
    for cmd in cmds:
        if len(cmd): # Skip empty lines
            success = sendCLI_configCommand(cmd, returnCliError, msgOnError)
            if not success:
                return False
    return True

def sendCLI_showRegex(cmdRegexStr): # Send show command and extract values from output using regex
    cmd, regex = map(str.strip, cmdRegexStr.split('|', 1))
    outputStr = sendCLI_showCommand(cmd)
    # We return a list of captured output; if nothing was matched an empty list is returned
    return re.findall(regex, outputStr, re.MULTILINE)

def sendCLI_NoError_showRegex(cmdRegexStr): # Send show command and extract values from output using regex
    cmd, regex = map(str.strip, cmdRegexStr.split('|', 1))
    outputStr = sendCLI_NoError_showCommand(cmd)
    # We return a list of captured output; if nothing was matched an empty list is returned
    return re.findall(regex, outputStr, re.MULTILINE)

def sendConfigCmds(cmds, returnCliError=False, msgOnError=None): # Send a list of config commands
    for cmd in cmds:
        if len(cmd): # Skip empty lines
            success = sendCLI_configCommand(cmd, returnCliError, msgOnError)
            if not success:
                return False
    return True


# --&gt; XMC Python script actually starts here &lt;--

##########################################################
# XMC Script: Creates and Configures FA on a BEB         #
# Written by Stephane Grosjean, PSE Extreme Networks     #
##########################################################

__version__ = '0.2'

#
# XMC Metadata
#

#@MetaDataStart
#@DetailDescriptionStart
######################################################################################
# 
# This script creates and configures Fabric Attach on an FA Server (VOSS).
#
# Several checks are performed to try to avoid mistakes.
#
#######################################################################################
#@DetailDescriptionEnd

#@SectionStart (description = "Single BEB Port Assignment")
#@VariableFieldLabel (description = "UNI Port",
#                     type = string,
#                     required = yes,
#                     readOnly = no,
#                     name = "portlist",
#                     value = "1/1"
#                     )
#@SectionEnd

#@SectionStart (description = "Cluster BEBs MLT Assignment")
#@VariableFieldLabel (description = "MLT",
#                     type = string,
#                     required = yes,
#                     validValues = [yes,no],
#                     readOnly = no,
#                     name = "mlt",
#                     value = "no"
#                     )

#@VariableFieldLabel (description = "MLT Id &lt;1 - 256&gt;",
#                     type = string,
#                     required = yes,
#                     readOnly = no,
#                     name = "mltid",
#                     value = "1"
#                     )

#@VariableFieldLabel (description = "MLT Port Member",
#                     type = string,
#                     required = yes,
#                     readOnly = no,
#                     name = "portmember",
#                     value = "1/1"
#                     )

#@VariableFieldLabel (description = "LACP",
#                     type = string,
#                     required = yes,
#                     validValues = [yes,no],
#                     readOnly = no,
#                     name = "lacp",
#                     value = "no"
#                     )

#@VariableFieldLabel (description = "LACP Key",
#                     type = string,
#                     required = yes,
#                     readOnly = no,
#                     name = "lacpkey",
#                     value = "1"
#                     )
#@SectionEnd

#@SectionStart (description = "FA Server Parameters")
#@VariableFieldLabel (description = "UNI Port/MLT 802.1Q Tagging",
#                     type = string,
#                     required = yes,
#                     validValues = [yes,no],
#                     readOnly = no,
#                     name = "tag",
#                     value = "yes"
#                     )

#@VariableFieldLabel (description = "UNI Port/MLT No Shutdown",
#                     type = string,
#                     required = yes,
#                     validValues = [yes,no],
#                     readOnly = no,
#                     name = "noshut",
#                     value = "yes"
#                     )

#@VariableFieldLabel (description = "FA Authentication",
#                     type = string,
#                     required = yes,
#                     validValues = [yes,no],
#                     readOnly = no,
#                     name = "fa-auth",
#                     value = "no"
#                     )
#@SectionEnd

#@SectionStart (description = "FA Management VLAN Configuration")
#@VariableFieldLabel (description = "Management VLAN",
#                     type = string,
#                     required = yes,
#                     validValues = [yes,no],
#                     readOnly = no,
#                     name = "mgmt",
#                     value = "no"
#                     )

#@VariableFieldLabel (description = "Management VLAN Id",
#                     type = string,
#                     required = yes,
#                     readOnly = no,
#                     name = "vid",
#                     value = "100"
#                     )

#@VariableFieldLabel (description = "Management VLAN Service Id",
#                     type = string,
#                     required = yes,
#                     readOnly = no,
#                     name = "isid",
#                     value = "12000"
#                     )
#@SectionEnd
#@MetaDataEnd


# Variables:
CLI_Dict = {
    'VSP Series'    : {
        'enable_context'        : 'enable',
        'config_context'        : 'config term',
        'end_config'            : 'end',
        'save_config'           : 'save config',
        'get_flex_uni'          : 'show interfaces gigabitEthernet config {}|^(\d\/\d+)\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+(Enable|Disable)', # Port
        'create_flex_uni'       : 'interface gigabitEthernet {}; flex-uni enable; exit', # Port
        'check_cvlan_exists'    : 'show vlan basic {0}|^({0})\s', # Vlan
        'create_cvlan'          : 'vlan create {0} type port-mstprstp 0', # {0} = vlan
        'get_cvlan_isid'        : 'show vlan i-sid {0}|^{0}\s+(\d+)', # Vlan
        'set_cvlan_isid'        : 'vlan i-sid {0} {1}', # {0} = vlan; {1} = i-sid
        'is_port_in_vlan'       : 'show vlan members port {0}|^(\d+)', # {0} = port     
        'create_cvlan_uni'      : { # {0} = vlan; {1} = port-list
            'tag'               : 'interface gigabitEthernet {1}; encapsulation dot1q; exit; vlan members add {0} {1}',
            'untag'             : 'interface gigabitEthernet {1}; no encapsulation dot1q; exit; vlan members add {0} {1}',
                                  },
        'get_swithed_uni_ports' : 'show running-config module i-sid | begin "i-sid {}"', # Isid
        'create_switched_uni'   : { # {0} = i-sid; {1} = vlan; {2} = port-list
            'tag'               : 'i-sid {0}; c-vid {1} port {2}; exit',
            'untag'             : 'i-sid {0}; untagged-traffic port {2}; exit',
            'noport'            : 'i-sid {0}; exit',
                                  },
        'delete_switched_uni'   : { # {0} = i-sid; {1} = vlan; {2} = port-list
            'tag'               : 'i-sid {0}; no c-vid {1} port {2}; exit',
            'untag'             : 'i-sid {0}; no untagged-traffic port {2}; exit',
            'transparent'       : 'i-sid {0}; no port {2}; exit'
                                  },
    },
    'Summit Series'    : {
        'save_config'           : 'save configuration',
        'check_cvlan_exists'    : 'show vlan|^\S+\s+({0})\s', # Vlan
        'create_cvlan'          : 'create vlan {0}', # {0} = vlan
        'get_cvlan_isid'        : 'show vlan {0} fabric attach assignments|^\s+{0}\s+\S+\s+Static\s+(\d+)', # Vlan
        'set_cvlan_isid'        : 'configure vlan {0} add isid {1}', # {0} = vlan; {1} = i-sid 
        'create_cvlan_uni'      : { # {0} = vlan; {1} = port-list
            'tag'               : 'configure vlan {0} add ports {1} tagged',
            'untag'             : 'configure vlan {0} add ports {1} untagged',
                                  },
    },
    'ERS Series'    : {
        'enable_context'        : 'enable',
        'config_context'        : 'config term',
        'end_config'            : 'end',
        'save_config'           : 'copy config nvram',
        'check_cvlan_exists'    : 'show vlan id {0}|^({0})\s', # Vlan
        'create_cvlan'          : 'vlan create {0} type port', # {0} = vlan
        'get_cvlan_isid'        : 'show vlan i-sid {0}|^{0}\s+(\d+)', # Vlan
        'set_cvlan_isid'        : 'i-sid {1} vlan {0}', # {0} = vlan; {1} = i-sid 
        'create_cvlan_uni'      : { # {0} = vlan; {1} = port-list
            'tag'               : 'vlan ports {1} tagging tagAll; vlan members add {0} {1}',
            'untag'             : 'vlan ports {1} tagging untagAll; vlan members add {0} {1}',
                                  },
    },
}


def portIsInVLAN(ports):  
    myList = sendCLI_showRegex(CLI_Dict['VSP Series']['is_port_in_vlan'].format(ports))

    if myList:
        for row in myList:
            if row != "1":
                return None
        return True
    
    return None

def CheckFAonPort(interface):
    if "/" in interface:
        portFAenabled = sendCLI_showRegex('show fa interface port {0}|^Port({0})\s'.format(interface))
    else:
        portFAenabled = sendCLI_showRegex('show fa interface mlt {0}|^Mlt({0})\s'.format(interface))
    
    if portFAenabled:
        return None

    return True

def CheckMLT(mltid, portmember):
    MltObj = sendCLI_NoError_showRegex('show mlt {0}|^({0})\s+\w+\s+(\d+/\d+)\s'.format(mltid))
    
    if MltObj:
        port = MltObj[1]
        if port != portmember:
            return None
    
    return True
 


def main():
    family = emc_vars["family"]
    if family != "VSP Series":
        raise RuntimeError('Error: This script needs to be executed on a VSP switch')

    if emc_vars["mgmt"] == "yes":
        if int(emc_vars["vid"]) &gt; 4094 or int(emc_vars["vid"]) &lt; 2:
            raise RuntimeError('Error: Mgmt VLAN Id is out of range')
        if int(emc_vars["isid"]) &gt; 16000000 or int(emc_vars["isid"]) &lt; 1:
            raise RuntimeError('Error: Mgmt Service Id is out of range')
        
    if CheckFAonPort((emc_vars["portlist"], emc_vars["mltid"])[emc_vars["mlt"] == "yes"]) is None:
        raise RuntimeError('Error: Fabric Attach is already configured on interface {}'.format((emc_vars["portlist"], "mlt "+emc_vars["mltid"])[emc_vars["mlt"] == "yes"]))
        
    if emc_vars["mlt"] == "yes":
        # check if MLT already exists and what port is in it
        if CheckMLT(emc_vars["mltid"], emc_vars["portmember"]) is None:
            raise RuntimeError('Error: MLT {} already exists and has a different port member than port {}'.format(emc_vars["mltid"], emc_vars["portmember"]))
            
    else:
        # check if the port is already a member of a VLAN
        if portIsInVLAN(emc_vars["portlist"]) is None:
           raise RuntimeError('Error: Port {} is already part of a VLAN and cannot be configured for FA'.format(emc_vars["portlist"]))
           
        
    cmds = ["enable", "configure terminal"]
    result = sendConfigCmds(cmds)
    if result is False:
        return
    
    cmds = []
    if emc_vars["mgmt"] == "yes":
        cmds.append("vlan create {} name Mgmt type port-mstprstp 0".format(emc_vars["vid"]))
        cmds.append("vlan i-sid {} {}".format(emc_vars["vid"], emc_vars["isid"]))
    
    if emc_vars["mlt"] == "yes":
        cmds.append("mlt {} enable".format(emc_vars["mltid"]))
        if emc_vars["lacp"] == "no":
            cmds.append("mlt {} member {}".format(emc_vars["mltid"], emc_vars["portmember"]))
        if emc_vars["tag"] == "yes":
            cmds.append("mlt {} encapsulation dot1q".format(emc_vars["mltid"]))
        cmds.append("vlan members remove 1 {}".format(emc_vars["portmember"]))
        cmds.append("interface mlt {}".format(emc_vars["mltid"]))
        if emc_vars["lacp"] == "yes":
            cmds.append("lacp enable key {}".format(emc_vars["lacpkey"]))
        cmds.append("smlt")
        cmds.append("fa enable")
        if emc_vars["fa-auth"] == "no":
            cmds.append("no fa message-authentication")
        if emc_vars["mgmt"] == "yes":
            cmds.append("fa management i-sid {} c-vid {}".format(emc_vars["isid"], emc_vars["vid"]))
        cmds.append("exit")
        cmds.append("interface GigabitEthernet {}".format(emc_vars["portmember"]))
        if emc_vars["lacp"] == "yes":
            cmds.append("lacp key {} aggregation enable timeout-time short".format(emc_vars["lacpkey"]))
            cmds.append("lacp enable")
        if emc_vars["noshut"] == "yes":
            cmds.append("no shutdown")
        cmds.append("exit")
    else:
        cmds.append("vlan members remove 1 {}".format(emc_vars["portlist"]))
        cmds.append("interface GigabitEthernet {}".format(emc_vars["portlist"]))
        cmds.append("fa enable")
        if emc_vars["fa-auth"] == "no":
            cmds.append("no fa message-authentication")
        if emc_vars["tag"] == "yes":
            cmds.append("encapsulation dot1q")
        if emc_vars["mgmt"] == "yes":
            cmds.append("fa management i-sid {} c-vid {}".format(emc_vars["isid"], emc_vars["vid"]))
        if emc_vars["noshut"] == "yes":
            cmds.append("no shutdown")
        cmds.append("exit")
        
    result = sendConfigCmds(cmds)
    if result is False:
        return
        
main()</content>
    <creationDate>1557731994162</creationDate>
    <creator>root</creator>
    <defaultCategory></defaultCategory>
    <devicesRequired>true</devicesRequired>
    <contexts>,Device,</contexts>
    <id>160</id>
    <lastUpdateDate>1557731994162</lastUpdateDate>
    <lastUpdatedBy>root</lastUpdatedBy>
    <metaDataPath>/usr/local/Extreme_Networks/NetSight/appdata/scripting/overrides/Fabric_Attach_Server_Config.xml</metaDataPath>
    <miscXMLData></miscXMLData>
    <nosIds>,nos-id-voss,nos-id-fabricIQ,</nosIds>
    <postprocessScript></postprocessScript>
    <rollbackScript></rollbackScript>
    <saveConfigOnExit>false</saveConfigOnExit>
    <scriptOwner></scriptOwner>
    <scriptPath>/usr/local/Extreme_Networks/NetSight/appdata/scripting/overrides/Fabric_Attach_Server_Config.py</scriptPath>
    <scriptTimeout>60</scriptTimeout>
    <scriptType>Python</scriptType>
    <supprotedGroups></supprotedGroups>
    <roles>,NetSight Administrator,</roles>
    <vendor></vendor>
    <version>0</version>
</script>

