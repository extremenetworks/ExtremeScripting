<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<script name="Fabric Connect Config">
    <auditLogEnabled></auditLogEnabled>
    <cacheDate>1557733360737</cacheDate>
    <category>,Fabric Connect,</category>
    <comments>Creates a Fabric Connect</comments>
    <content>'''
Python Scripts provided by Extreme Networks.

This script is provided free of charge by Extreme.  We hope such scripts are
helpful when used in conjunction with Extreme products and technology;
however, scripts are provided simply as an accommodation and are not
supported nor maintained by Extreme.  ANY SCRIPTS PROVIDED BY EXTREME ARE
HEREBY PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL EXTREME OR ITS
THIRD PARTY LICENSORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
IN CONNECTION WITH THE USE OR DISTRIBUTION OF SUCH SCRIPTS.

This script setups Fabric Connect for VOSS. It assumes reachabilty to each 
Fabric node (VSP) is available (via OoB or else)

It tries to propose a lot of parameters to customize the fabric, while still allowing
for many "best practise" defaults to simplyfing the usage.
'''

try:
    emc_vars
except: # If not running on XMC Jython...
    raise RuntimeError('This script must be used with XMC')

# IMPORTS
import re

# VARIABLES:
Debug = False
Sanity = False
RegexPrompt = re.compile('.*[\?\$%#&gt;]\s?$')
RegexError  = re.compile(
    '^%|\x07|error|invalid|cannot|unable|bad|not found|not exist|not allowed|no such|already exist|must be|out of range|incomplete|failed|denied|can\'t|ambiguous|do not|unrecognized',
    re.IGNORECASE
)
RegexPort = re.compile('^(?:[1-9]\d?[/:])?\d+$')
RegexPortRange = re.compile('^(?:([1-9]\d?)([/:]))?(\d+)-(?:([1-9]\d?)[/:])?(\d+)$')
RegexContextPatterns = { # Ported from acli.pl
    'ERS Series' : [
        re.compile('^(?:interface |router \w+$|route-map (?:\"[\w\d\s\.\+-]+\"|[\w\d\.-]+) \d+$|ip igmp profile \d+$|wireless|application|ipv6 dhcp guard policy |ipv6 nd raguard policy )'), # level0
        re.compile('^(?:security|crypto|ap-profile |captive-portal |network-profile |radio-profile )'), # level1
        re.compile('^(?:locale)'), # level2
    ],
    'VSP Series' : [
        re.compile('^ *(?:interface |router \w+$|router vrf|route-map (?:\"[\w\d\s\.\+-]+\"|[\w\d\.-]+) \d+$|application|i-sid \d+|wireless|logical-intf isis \d+|mgmt [\dcvo]|ovsdb$)'), # level0
        re.compile('^ *(?:route-map (?:\"[\w\d\s\.\+-]+\"|[\w\d\.-]+) \d+$)'), # level1
    ],
}
RegexExitInstance = re.compile('^ *(?:exit|back|end)(?:\s|$)')
Indent = 3 # Number of space characters for each indentation
LastError = None
ConfigHistory = []


def cleanOutput(outputStr): # Remove echoed command and final prompt from output
    lastLine = outputStr.splitlines()[-1:][0]
    if RegexPrompt.match(lastLine):
        lines = outputStr.splitlines()[1:-1]
    else:
        lines = outputStr.splitlines()[1:]
    return '\n'.join(lines)

def sendCLI_showCommand(cmd, returnCliError=False, msgOnError=None): # Send a CLI show command; return output
    global LastError
    resultObj = emc_cli.send(cmd)
    if resultObj.isSuccess():
        outputStr = cleanOutput(resultObj.getOutput())
        if outputStr and RegexError.search("\n".join(outputStr.split("\n")[:2])): # If there is output, check for error in 1st 2 lines only
            if returnCliError: # If we asked to return upon CLI error, then the error message will be held in LastError
                LastError = outputStr
                if msgOnError:
                    print "==&gt; Ignoring above error: {}\n\n".format(msgOnError)
                return None
            raise RuntimeError(outputStr)
        else:
            LastError = None
            return outputStr
    else:
        raise RuntimeError(resultObj.getError())

def sendCLI_configCommand(cmd, returnCliError=False, msgOnError=None): # Send a CLI config command
    global LastError
    if Sanity:
        print "SANITY&gt; {}".format(cmd)
        ConfigHistory.append(cmd)
        LastError = None
        return True
    resultObj = emc_cli.send(cmd)
    if resultObj.isSuccess():
        outputStr = cleanOutput(resultObj.getOutput())
        if outputStr and RegexError.search("\n".join(outputStr.split("\n")[:2])): # If there is output, check for error in 1st 2 lines only
            if returnCliError: # If we asked to return upon CLI error, then the error message will be held in LastError
                LastError = outputStr
                if msgOnError:
                    print "==&gt; Ignoring above error: {}\n\n".format(msgOnError)
                return False
            raise RuntimeError(outputStr)
        else:
            ConfigHistory.append(cmd)
            LastError = None
            return True
    else:
        raise RuntimeError(resultObj.getError())

def sendCLI_configChain(chainStr, returnCliError=False, msgOnError=None): # Send a semi-colon separated list of config commands
    cmds = map(str.strip, re.split(r'[;\n]', chainStr))
    for cmd in cmds:
        if len(cmd): # Skip empty lines
            success = sendCLI_configCommand(cmd, returnCliError, msgOnError)
            if not success:
                return False
    return True

def sendCLI_showRegex(cmdRegexStr): # Send show command and extract values from output using regex
    cmd, regex = map(str.strip, cmdRegexStr.split('|', 1))
    outputStr = sendCLI_showCommand(cmd)
    # We return a list of captured output; if nothing was matched an empty list is returned
    return re.findall(regex, outputStr, re.MULTILINE)

def sendConfigCmds(cmds, returnCliError=False, msgOnError=None): # Send a list of config commands
    for cmd in cmds:
        if len(cmd): # Skip empty lines
            success = sendCLI_configCommand(cmd, returnCliError, msgOnError)
            if not success:
                return False
    return True


# --&gt; XMC Python script actually starts here &lt;--

##########################################################
# XMC Script: Creates a Fabric Connect                   #
# Written by Stephane Grosjean, PSE Extreme Networks     #
##########################################################

__version__ = '0.2'

#
# XMC Metadata
#



#@MetaDataStart
#@DetailDescriptionStart
######################################################################################
# 
# This script setups Fabric Connect for VOSS. It assumes reachabilty to each 
# Fabric node (VSP) is available (via OoB or else)
#
#######################################################################################
#@DetailDescriptionEnd


#@SectionStart (description = "Service Definition to create")
#    @VariableFieldLabel (description = "BVLAN 1",
#                     type = string,
#                     required = yes,
#                     readOnly = no,
#                     name = "bvlan1",
#                     value = "4051"
#                     )

#    @VariableFieldLabel (description = "BVLAN 2",
#                     type = string,
#                     required = yes,
#                     readOnly = no,
#                     name = "bvlan2",
#                     value = "4052"
#                     )

#    @VariableFieldLabel (description = "AREA",
#                     type = string,
#                     required = yes,
#                     readOnly = no,
#                     name = "area",
#                     value = "49.0000"
#                     )

#    @VariableFieldLabel (description = "Nickname",
#                     type = string,
#                     required = yes,
#                     readOnly = no,
#                     validValues = [auto,custom],
#                     name = "nickname",
#                     value = "auto"
#                     )

#    @VariableFieldLabel (description = "Multicast Enable",
#                     type = string,
#                     required = yes,
#                     readOnly = no,
#                     validValues = [yes,no],
#                     name = "multicast",
#                     value = "no"
#                     )
#@SectionEnd

#@SectionStart (description = "Device Specific Data")
#    @VariableFieldLabel (description = "NNI Fabric Port List",
#                     type = string,
#                     required = yes,
#                     readOnly = no,
#                     name = "portlist",
#                     value = "1/1-1/3",
#                     scope = device
#                     )

#    @VariableFieldLabel (description = "Nickname Custom",
#                     type = string,
#                     required = yes,
#                     readOnly = no,
#                     name = "nicknameCustom",
#                     value = "",
#                     scope = device
#                     )
#@SectionEnd
#@MetaDataEnd

REFERENCE_BANDWIDTH = 2000000
SPBMID = '1'


def CreatePortList(portlist):
    new_port_list = []
    for port in portlist:
        my_list = []
        port = port.replace(' ','')
        port = port.split(',')
        
        if '/' in port[0]:
            prefix = port[0][:2]
        else:
            return None
        
        for entry in port:
            entry = entry.replace(prefix,'')
            my_list.append(entry)

        for s in my_list:
            if '-' in s:
                s = s.split('-')
                for i in range(int(s[0]), int(s[1])+1):
                    new_port_list.append(prefix+str(i))
            else:
                new_port_list.append(prefix+s)
                        
    return new_port_list

# finds if Fabric Connect is already configured
# we assume there must be 2 bvlans
# we check if spbm is Up and if the bvlans match and if the ISIS area matches as well
# if it matches and only new NNI ports are found, we accept that as an extension 
#   of an existing config, for example to add new nodes in the fabric, and return True
# if critical config do not match we return False to stop the script
# if no config is found we return None
def FabricConnect():
    # assumption is that the CLI cmd 'sh isis spbm' is good enough to find Fabric Connect info
    # if there's no SPBM instance we assume FC is not configured
    # otherwise FC must be configured and then we check the BVLAN if they match
    spbminstObj = sendCLI_showRegex('show isis spbm|\s+\w+:\s+(\d+)\s')
    if spbminstObj:
        spbminst = int(spbminstObj[0])
    else:
        # this souldn't happen, but in case of, we catch it and return an error
        return False
    
    if spbminst &gt; 0:
        # if we do not have the same SPBM instance Id we return False and stop the script
        if spbminst != int(SPBMID):
            return False
        
        spbminstObj = sendCLI_showRegex('show isis spbm|\d+\s+(\d+-\d+)\s+(\d+)\s')
        spbminfo = spbminstObj[0][0]
        primary = spbminstObj[0][1]
        
        # do we have the same ISIS area than desired?
        isisarea = sendCLI_showRegex('show isis area|^\d+\.\S+')
        
        # there's a spbm instance but no area defined - this is a bad sign
        if not isisarea:
            return False
        
        if isisarea[0] != emc_vars["area"]:
        # answer is no. We return False and stop the script
            return False
        
        if "-" in spbminfo:
            bvids = spbminfo.split('-')
            
            # do we have our two bvlans and do they match with what we want to configure?
            if bvids[0] in [emc_vars["bvlan1"], emc_vars["bvlan2"]] and bvids[1] in [emc_vars["bvlan1"], emc_vars["bvlan2"]] and primary == emc_vars["bvlan1"]:
                return True
            else:
            # answer is no. We return False and stop the script
                return False
        else:
        # we do not have 2 bvlans. We return False and stop the script - this script assumes always 2 bvlans
        # we could make an enhancement to support a single one by setting a value to 0, for example. Not done at this time, what's the reason to not have 2 bvlans?
            return False
        
        
    # there's no spbm instance running, we return None and configure it all
    return None

# we generate a nickname out of the device management IP address
# this method should return a unique value until the netmask is /22 or greater
def generateNickName(seed):
    seed = seed.split('.')
    base = int(seed[3]) + int(seed[2])*(2**8) + int(seed[1])*(2**16) + int(seed[0])*(2**24)
    
    base = bin(base)[2:]
    base = base[12:32]
    
    c = hex(int(base[12:20],2))[2:]
    b = hex(int(base[4:12],2))[2:]
    a = hex(int(base[:4],2))[2:]
    
    nickname = str(a) + '.' + (str(b) if len(str(b)) == 2 else '0'+str(b)) + '.' + (str(c) if len(str(c)) == 2 else '0'+str(c))
    
    return nickname

# we find the interface speed for each NNI interface to later set an appropriate metric
def InterfaceSpeed(portlist):
    myList = []
    sendCLI_showCommand('enable')
    ifspeed = sendCLI_showRegex('show interfaces gigabitEthernet l1-config {}|^(\d\/\d+).*\w+\s\d+\s+\w+\s(\d+)'.format(portlist))
    
    for row in ifspeed:
        spif = {}
        spif["port"] = row[0]
        spif["speed"] = row[1]
        myList.append(spif)
        
    return myList

# we find the NNI interface list to manipulate them more easily
def InterfaceList(portlist):
    myList = []
    sendCLI_showCommand('enable')
    ifspeed = sendCLI_showRegex('show interfaces gigabitEthernet l1-config {}|^(\d\/\d+)'.format(portlist))
    
    for row in ifspeed:
        spif = {}
        spif["port"] = row
        myList.append(spif)
        
    return myList
    
    
def main():
    # we first perform some sanity checks
    familyType = emc_vars["family"]
    if familyType != "VSP Series":
        raise RuntimeError('Error: This script needs to be executed on a VSP switch')
        
    if int(emc_vars["bvlan1"]) &gt; 4094 or int(emc_vars["bvlan1"]) &lt; 2:
        raise RuntimeError('BVLAN 1 Id is out of range')
    if int(emc_vars["bvlan2"]) &gt; 4094 or int(emc_vars["bvlan2"]) &lt; 2:
        raise RuntimeError('BVLAN 2 Id is out of range')
    if int(emc_vars["bvlan1"]) == int(emc_vars["bvlan2"]):
        raise RuntimeError('Error: BVLAN 1 Id is identical than BVLAN 2 Id')
    
    if emc_vars["nickname"] == "custom":
        if not re.match("[\da-fA-F]\.[\da-fA-F]{2}\.[\da-fA-F]{2}", emc_vars[nicknameCustom]):
            raise RuntimeError('Error: The custom nickname value provided for device {} is not valid - must be in the form x.xx.xx'.format(emc_vars["deviceIP"]))
    
    # is Fabric Connect already running? We can accept it to be running if the critical parmaters are the same, ie to add a new NNI port for example
    FC = FabricConnect()
    if FC is False:
        # FC is already configured with a different area, id or bvlans
        raise RuntimeError('Error: Fabric Connect is already configured on switch {} and has different critical parameters'.format(emc_vars["deviceIP"]))
    elif FC is True:
        # FC is already configured but with similar parameters - maybe this is just to add some new interfaces so we remove the existing ones
        myIfList = sendCLI_showRegex('show isis interface|^Port\d\/\d+')
        skipIntf = []
        for item in myIfList:
            item = item.replace('Port','')
            skipIntf.append(item)
        
    # is the user providing a custom nickname?
    if emc_vars["nickname"] == "auto":
        nickname = generateNickName(emc_vars["deviceIP"])
    else:
        nickname = emc_vars[nicknameCustom]
    
    # let's create our list of ports and speeds
    # at this stage the interfaces are down so the speed is not important
    intList = InterfaceList(emc_vars["portlist"])
    
    cmds = ["enable", "configure terminal"]
    
    if FC is None:
        # enable spbm mode on the switch
        cmds.append("spbm")
        # configuration of spbm on isis
        cmds.append("router isis")
        cmds.append("spbm {}".format(SPBMID))
        cmds.append("spbm {} b-vid {},{} primary {}".format(SPBMID, emc_vars["bvlan1"], emc_vars["bvlan2"], emc_vars["bvlan1"]))
        if emc_vars["multicast"] == "yes":
            cmds.append("spbm {} multicast enable".format(SPBMID))
        cmds.append("spbm {} nick-name {}".format(SPBMID, nickname))
        cmds.append("manual-area {}".format(emc_vars["area"]))
        cmds.append("exit")
    
    # removes from vlan 1 the portlist
    cmds.append("vlan members remove 1 {}".format(emc_vars["portlist"]))    
    # configuration of spbm on interfaces
    for intf in intList:
        if FC and intf.get("port") in skipIntf:
            continue
        cmds.append("interface gigabitEthernet {}".format(intf.get("port")))
        cmds.append("isis")
        cmds.append("isis spbm {}".format(SPBMID))
        cmds.append("isis enable")
        cmds.append("encapsulation dot1q")
        cmds.append("no shutdown")
        cmds.append("exit")
    
    if FC is None:
        # creation of the bvlans
        cmds.append("vlan create {} type spbm-bvlan".format(emc_vars["bvlan1"]))
        cmds.append("vlan create {} type spbm-bvlan".format(emc_vars["bvlan2"]))
        # activation of ISIS
        cmds.append("router isis enable")
        # we configure CFM as a default. The MEPID is the last octet of the device management IP, which allows us for 254 unique values
        # it might be necessary to tweak that default if more nodes are present
        # eventually, it is possible to add a field to set up a specific value
        cmds.append("cfm spbm mepid {}".format(emc_vars["deviceIP"].split('.')[3]))
        cmds.append("cfm spbm enable")
    
    result = sendConfigCmds(cmds)
    if result is None:
        return

    # to find the true speed of the interfaces we needed them to be Up
    # we can check them again
    speedList = InterfaceSpeed(emc_vars["portlist"])
    cmds = []
    for intf in speedList:
        if FC and intf.get("port") in skipIntf:
            continue
        cmds.append("interface gigabitEthernet {}".format(intf.get("port")))
        cmds.append("isis spbm {} l1-metric {}".format(SPBMID, str(int(REFERENCE_BANDWIDTH/int(intf.get("speed"))))))
        cmds.append("exit")
        
    result = sendConfigCmds(cmds)
    if result is None:
        return

    
main()</content>
    <creationDate>1557733360725</creationDate>
    <creator>root</creator>
    <defaultCategory></defaultCategory>
    <devicesRequired>true</devicesRequired>
    <contexts>,Device,</contexts>
    <id>169</id>
    <lastUpdateDate>1557733360725</lastUpdateDate>
    <lastUpdatedBy>root</lastUpdatedBy>
    <metaDataPath>/usr/local/Extreme_Networks/NetSight/appdata/scripting/overrides/Fabric_Connect_Config.xml</metaDataPath>
    <miscXMLData></miscXMLData>
    <nosIds>,nos-id-voss,nos-id-fabricIQ,</nosIds>
    <postprocessScript></postprocessScript>
    <rollbackScript></rollbackScript>
    <saveConfigOnExit>false</saveConfigOnExit>
    <scriptOwner></scriptOwner>
    <scriptPath>/usr/local/Extreme_Networks/NetSight/appdata/scripting/overrides/Fabric_Connect_Config.py</scriptPath>
    <scriptTimeout>60</scriptTimeout>
    <scriptType>Python</scriptType>
    <supprotedGroups></supprotedGroups>
    <roles>,NetSight Administrator,</roles>
    <vendor></vendor>
    <version>0</version>
</script>

