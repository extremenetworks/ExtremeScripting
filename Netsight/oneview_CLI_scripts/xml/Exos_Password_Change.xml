<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<script name="Exos Password Change">
    <abortOnError>true</abortOnError>
    <auditLogEnabled></auditLogEnabled>
    <category>,Macro,</category>
    <comments>Change password</comments>
    <content>#@MetaDataStart
#@DetailDescriptionStart
######################################################################################
# 
# This script changes password on the EXOS switch
# 
#######################################################################################
#@DetailDescriptionEnd

#@VariableFieldLabel (description = "Username",
#                     type = string,
#                     required = yes,
#                     readOnly = no,
#                     name = "UserName",
#                     value = "username"
#                     )
#@VariableFieldLabel (description = "Current password",
#                     type = string,
#                     required = no,
#                     readOnly = no,
#                     name = "CurrentPwd",
#                     value = "old password"
#                     )
#@VariableFieldLabel (description = "New password",
#                     type = string,
#                     required = yes,
#                     readOnly = no
#                     name = "NewPwd",
#                     value = "new password"
#                     )
#@MetaDataEnd

from xmclib import logger
from xmclib import emc_vars

######## FUNCTION DEFINITIONS
def wf_error(log):
    print 'ERROR: %s'%log
    logger.info(log)
    
def wf_info(log):
    print 'INFO: %s'%log
    logger.info(log)

def sendConfigCmds(cmds, wait = True): 
    for cmd in cmds:
        cli_results = emc_cli.send( cmd, wait )
        if cli_results.isSuccess() is False:
            print 'CLI-ERROR: %s' %cli_results.getError()
            wf_error("CLI ERROR EXECUTING CLI COMMANDS")
            status = emc_results.Status
            emc_results.setStatus( status.ERROR)
            exit
    cli_lines = cli_results.getOutput()
    return cli_lines

######## Starting here 

def main():
    varCommand = ['show configuration aaa | in " %s encrypted"'%emc_vars['UserName']]
    Original = sendConfigCmds(varCommand,wait=True)
    if len(Original.split('\n')) == 3:
        wf_error('Account %s does not exist!'%emc_vars['UserName'])
        return

    varCommand = ['configure account "%s" password'%emc_vars['UserName']]
    sendConfigCmds(varCommand,wait=False)
    sendConfigCmds([emc_vars['CurrentPwd']],wait=False)
    sendConfigCmds([emc_vars['NewPwd']],wait=False)
    sendConfigCmds([emc_vars['NewPwd']],wait=True)

    varCommand = ['show configuration aaa | in " %s encrypted"'%emc_vars['UserName']]
    New = sendConfigCmds(varCommand,wait=True)

    if Original.split('\n')[1] == New.split('\n')[1]:
        wf_error ('NotChanged')
    else:
        wf_info ("Password was changed")
    return

main()

#################
## Be Extreme! ##
#################</content>
    <creationDate>1608280432882</creationDate>
    <creator>root</creator>
    <defaultCategory></defaultCategory>
    <devicesRequired>true</devicesRequired>
    <encoded>true</encoded>
    <contexts>,Groups,Device,</contexts>
    <lastUpdateDate>1608290851793</lastUpdateDate>
    <lastUpdatedBy>root</lastUpdatedBy>
    <miscXMLData></miscXMLData>
    <nosIds>,nos-id-switchIQ,nos-id-exos,</nosIds>
    <postprocessScript></postprocessScript>
    <rollbackScript></rollbackScript>
    <saveConfigOnExit>false</saveConfigOnExit>
    <scriptOwner></scriptOwner>
    <scriptTimeout>60</scriptTimeout>
    <scriptType>Python</scriptType>
    <supprotedGroups></supprotedGroups>
    <roles>,NetSight Administrator,</roles>
    <vendor></vendor>
    <version>0</version>
</script>

