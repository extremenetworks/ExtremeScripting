<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<script name="Configure Vlan on Port - Extreme-Cisco-Comware-Procurve">
    <auditLogEnabled></auditLogEnabled>
    <cacheDate>1546553746585</cacheDate>
    <category>,VLAN,</category>
    <comments>Will create vlan (if does not exist) and assign the vlan to selected ports</comments>
    <content># @METADATASTART
#@DetailDescriptionStart
################################################################################
# Community maintained CLI Scripting Library
#
# Script        : Configure vlan on ports - tagged or untagged based on request
# Revision      : 1.4
# Last updated  : 16.12.2019
# Purpose       : Configure PVID on selected ports
# Devices	    : Cisco Catalyst 12.2, 15.2, XOS 15.7,
# Devices       : XOS 21.3, XOS 22.2, XOS 15.3, 
# Devices       : HPE Comware 7.1.045
# Devices       : HPE Procurve H.10.119
#
# Note:  This script does configure VLAN on ports.
################################################################################
#@DetailDescriptionEnd

# @ScriptDescription "Basic script for vlan assignment. Please see Script View tab for details."
# @SectionStart ( description = "Provide your input please.")

# @VariableFieldLabel (description = "VLAN name mandatory",
#    type       = String,
#    scope      = global,
#    required   = yes
#    )
set var VLANNAME ""

# @VariableFieldLabel (description   = "VLAN ID (tag) if the vlan does not exist", 
#    type       = String,
#    required   = no,
#    scope      = global
#    )
set var VLANID ""

# @VariableFieldLabel (description   = "Selected ports will be tagged or untagged?",
#    type       = String,
#    scope      = global,
#    required   = yes,
#    validValues=[tagged,untagged]
#    )
set var EGRESS "untagged"

# @VariableFieldLabel (description   = "Save the config after?",
#    type       = String,
#    scope      = global,
#    required   = yes,
#    validValues=[yes,no]
#    )
set var SAVECONFIG "yes"

# @SectionEnd
# @MetaDataEnd

################################################################################
#    Here starts the magic
################################################################################

proc H3CPortConfig {portname vlanid egress} {
    CLI interface $portname
	IF ($egress == "untagged" ) THEN
        CLI port link-type access
		CLI port access vlan $vlanid
	ELSE
        CLI port link-type trunk
		CLI port trunk permit vlan $vlanid
	ENDIF
    CLI quit
}

proc CiscoPortConfig {portname vlanid egress} {
    CLI interface $portname
	IF ($egress == "untagged" ) THEN
        CLI switchport mode access
		CLI switchport access vlan $vlanid
	ELSE
        CLI switchport trunk encapsulation dot1q
        CLI switchport mode trunk
		CLI switchport trunk allowed vlan add $vlanid
	ENDIF
    CLI exit
}

proc ProcurvePortConfig {portname vlanid egress} {
    CLI vlan $vlanid
	IF ($egress == "untagged" ) THEN
		CLI untagged $portname
	ELSE
		CLI tagged $portname
	ENDIF
    CLI exit
}
proc EXOSPortConfig {portname vlanname egress} {
	IF ($egress == "untagged" ) THEN
        puts "### Lets check if there is a vlan on the port already! ###"
        CLI show ports $portname information detail | include Internal
        set COUTPUT $CLI_OUT
		set COMMA [string first "," $COUTPUT 0]
        set COLUMN [string first "Name:" $COUTPUT 0]
        incr COLUMN 6
        incr COMMA -1
        set VLANONPORT [string range $COUTPUT $COLUMN $COMMA]
        IF ($VLANONPORT != "" ) THEN
            puts "### Lets remove assigned VLAN from the port first! ###"
            CLI configure vlan $VLANONPORT delete ports $portname
        ENDIF
        puts "### Lets add the VLAN to the port. ###"
        CLI configure vlan $vlanname add ports $portname untagged
        regexp {.*Adding EAPS ring ports to a VLAN could cause a loop.*} ${CLI.OUT} foundWarning6
        IF ([info exists foundWarning6]) THEN
          CLI yes
        ENDIF
	ELSE
        puts "### Lets add the VLAN to the port. ###"
        CLI configure vlan $vlanname add ports $portname tagged
        regexp {.*Adding EAPS ring ports to a VLAN could cause a loop.*} ${CLI.OUT} foundWarning5
        IF ([info exists foundWarning5]) THEN
          CLI yes
        ENDIF
	ENDIF
}

if {[catch {
  set LENGTH [string length $port]
} result ]} {
     puts "### You have not selected any port. What had you expected me to do? ###"
     puts "### Dying now. ###"
     Die
   }

IF ($vendor =="Cisco" ) THEN
        CLI
		regexp {.*&gt;.*} ${CLI.OUT} foundWarning7
        IF ([info exists foundWarning7]) THEN
            CLI enable
        ENDIF
        set var VLANTAG $VLANID
        puts "### Does the vlan exist already? ###"
		CLI show vlan | include $#
        CLI show vlan name $VLANNAME | include $VLANNAME
        regexp {.*not found in current VLAN database.*} ${CLI.OUT} foundWarning4
        IF ([info exists foundWarning4]) THEN
            puts "### VLAN does not exist. Is the vlan ID used? ###"
            if ($VLANID == "" ) THEN
               puts "### VLAN $VLANNAME does not exist but ID was not entered! ###"
               puts "### Dying now. ###"
               Die
            ENDIF
            CLI show vlan id $VLANID | include $VLANID
            regexp {.*not found in current.*} ${CLI.OUT} foundWarning9
            IF ([info exists foundWarning9]) THEN
                puts "### Lets create the VLAN. ###"
                CLI configure terminal
                CLI vlan $VLANID
                CLI name $VLANNAME
                CLI exit
                CLI exit
            ELSE
               puts "### VLAN $VLANNAME does not exist but ID $VLANID is already used! ###"
               puts "### Dying now. ###"
               Die
            ENDIF		
        ELSE
            set content $CLI.OUT
            set records [split $content "\n"]
            set var TEMP ""
            foreach line $records {
                set LENGTH [string length $line]
                set SPACE [string first " " $line 0]
                set TEMP [string range $line 0 $SPACE]
                IF ($TEMP != "") THEN
                    set VLANTAG $TEMP
                ENDIF
            }
            puts "### VLAN $VLANNAME does have tag $VLANTAG"
        ENDIF
		CLI configure terminal
		set LENGTH [string length $port]
		set I 0
		set COMMA [string first "," $port $I]
		while {$COMMA != -1 } {
		 incr COMMA -1
		 set UNIQUEPORT [string range $port $I $COMMA] 
         puts "### Lets configure vlan $VLANTAG on the port $UNIQUEPORT as $EGRESS ###"
		 CiscoPortConfig $UNIQUEPORT $VLANTAG $EGRESS
		 set I $COMMA
		 incr I 2
		 set COMMA [string first "," $port $I]
		}
		set UNIQUEPORT [string range $port $I $LENGTH]
        puts "### Lets configure vlan $VLANTAG on the port $UNIQUEPORT as $EGRESS ###"
		CiscoPortConfig $UNIQUEPORT $VLANTAG $EGRESS
		CLI exit
		IF ($SAVECONFIG == "yes" ) THEN
          puts "### Lets save the config as was requested. ###"
          CLI write
        ENDIF
        puts "### Have a nice day! Be Extreme! ###"
        PerformSync -scope VLAN
ENDIF

IF ($vendor =="Extreme" ) THEN
        puts "### Does the vlan exist already? ###"
        CLI show vlan "$VLANNAME" | include \"name $VLANNAME \"
        regexp {.*Invalid input detected at.*} ${CLI.OUT} foundWarning1
        regexp {.*Ambiguous command.*} ${CLI.OUT} foundWarning1
        set records [split $CLI.OUT "\n"]
        set var I 0
        set var VLANEXISTS "NO"
        foreach line $records {
            IF ($I &gt; 0) THEN
                IF ([string first " name $VLANNAME" $line 0] != -1) THEN
                    set VLANEXISTS "YES"
                ENDIF
            ENDIF
            incr I
        }
        IF ($VLANEXISTS == "NO" || [info exists foundWarning1]) THEN
            puts "### VLAN does not exist. Is the vlan ID used? ###"
            CLI show vlan tag $VLANID
            regexp {.*tag is not configured for any.*} ${CLI.OUT} foundWarning2
            IF ([info exists foundWarning2]) THEN
                puts "### Lets create the VLAN. ###"
                CLI create vlan $VLANNAME tag $VLANID
            ELSE
               puts "### VLAN $VLANNAME does not exist but ID $VLANID is already used! ###"
               puts "### Dying now. ###"
               Die
            ENDIF		
        ENDIF
		set LENGTH [string length $port]
		set I 0
		set COMMA [string first "," $port $I]
		while {$COMMA != -1 } {
		 incr COMMA -1
		 set UNIQUEPORT [string range $port $I $COMMA] 
         puts "### Lets configure vlan $VLANNAME on the port $UNIQUEPORT as $EGRESS ###"
		 EXOSPortConfig $UNIQUEPORT $VLANNAME $EGRESS
		 set I $COMMA
		 incr I 2
		 set COMMA [string first "," $port $I]
		}
		set UNIQUEPORT [string range $port $I $LENGTH]
        puts "### Lets configure vlan $VLANNAME on the port $UNIQUEPORT as $EGRESS ###"
		EXOSPortConfig $UNIQUEPORT $VLANNAME $EGRESS
		IF ($SAVECONFIG == "yes" ) THEN
          puts "### Lets save the config as was requested. ###"
          CLI save
        ENDIF
        puts "### Have a nice day! Be Extreme! ###"
        PerformSync -scope VLAN
ENDIF

IF ($vendor =="H3C" ) THEN
        CLI system-view
        set var VLANTAG $VLANID
        puts "### Does the vlan exist already? ###"
        CLI display vlan brief | include \" $VLANNAME \"
        set records [split $CLI.OUT "\n"]
        set var I 0
        set var VLANEXISTS "NO"
        foreach line $records {
            IF ($I &gt; 0) THEN
                IF ([string first " $VLANNAME " $line 0] != -1) THEN
                    set VLANEXISTS "YES"
                ENDIF
            ENDIF
            incr I
        }
        IF ($VLANEXISTS == "NO") THEN
            IF ($VLANID == "") THEN
               puts "### VLAN $VLANNAME does not exist but ID was not entered! ###"
               puts "### Dying now. ###"
               Die
            ENDIF
            puts "### VLAN $VLANNAME does not exist. Lets create the vlan! ###"
            CLI vlan $VLANID                
            CLI name $VLANNAME
            ELSE
            CLI quit
        ELSE
            set content $CLI.OUT
            set records [split $content "\n"]
            set var TEMP ""
            foreach line $records {
                set LENGTH [string length $line]
                set SPACE [string first " " $line 0]
                set VLANTAG $TEMP
                set TEMP [string range $line 0 $SPACE] 
            }
            puts "### VLAN $VLANNAME does have tag $VLANTAG"
        ENDIF
		set LENGTH [string length $port]
		set I 0
		set COMMA [string first "," $port $I]
		while {$COMMA != -1 } {
		 incr COMMA -1
		 set UNIQUEPORT [string range $port $I $COMMA] 
         puts "### Lets configure vlan $VLANNAME on the port $UNIQUEPORT as $EGRESS ###"
		 H3CPortConfig $UNIQUEPORT $VLANTAG $EGRESS
		 set I $COMMA
		 incr I 2
		 set COMMA [string first "," $port $I]
		}
		set UNIQUEPORT [string range $port $I $LENGTH]
        puts "### Lets configure vlan $VLANNAME on the port $UNIQUEPORT as $EGRESS ###"
		H3CPortConfig $UNIQUEPORT $VLANTAG $EGRESS
		IF ($SAVECONFIG == "yes" ) THEN
          puts "### Lets save the config as was requested. ###"
          CLI save
        ENDIF
        puts "### Have a nice day! Be Extreme! ###"
        PerformSync -scope VLAN
ENDIF

IF ($family =="Procurve" ) THEN

        puts "### Does the vlan exist already? ###"
        CLI show vlans
        set records [split $CLI.OUT "\n"]
        set var I 0
        set var VLANEXISTS "NO"
        foreach line $records {
            IF ($I &gt; 0) THEN
                IF ([string first " $VLANNAME " $line 0] != -1) THEN
                    set VLANEXISTS "YES"
                ENDIF
            ENDIF
            incr I
        }
        IF ($VLANEXISTS == "NO") THEN
            IF ($VLANID == "") THEN
               puts "### VLAN $VLANNAME does not exist but ID was not entered! ###"
               puts "### Dying now. ###"
               Die
            ENDIF
            puts "### VLAN $VLANNAME does not exist. Lets create the vlan! ###"
            CLI configure
            CLI vlan $VLANID name $VLANNAME
            CLI exit
            set VLANTAG $VLANID
        ELSE
            set content $CLI.OUT
            set records [split $content "\n"]
            foreach line $records {
                IF ([string first " $VLANNAME " $line 0] != -1) THEN
                    set LENGTH [string length $line]
                    set SPACE [string first " " $line 2]
                    set VLANTAG [string range $line 2 $SPACE] 
                ENDIF
            }
            puts "### VLAN $VLANNAME does have tag $VLANTAG"
        ENDIF

		CLI configure
		set LENGTH [string length $port]
		set I 0
		set COMMA [string first "," $port $I]
		while {$COMMA != -1 } {
		 incr COMMA -1
		 set UNIQUEPORT [string range $port $I $COMMA] 
         puts "### Lets configure vlan $VLANTAG on the port $UNIQUEPORT as $EGRESS ###"
		 ProcurvePortConfig $UNIQUEPORT $VLANTAG $EGRESS
		 set I $COMMA
		 incr I 2
		 set COMMA [string first "," $port $I]
		}
		set UNIQUEPORT [string range $port $I $LENGTH]
        puts "### Lets configure vlan $VLANTAG on the port $UNIQUEPORT as $EGRESS ###"
		ProcurvePortConfig $UNIQUEPORT $VLANTAG $EGRESS
		CLI exit
		IF ($SAVECONFIG == "yes" ) THEN
          puts "### Lets save the config as was requested. ###"
          CLI write memory
        ENDIF
        puts "### Have a nice day! Be Extreme! ###"
        PerformSync -scope VLAN
ENDIF</content>
    <creationDate>1524517949402</creationDate>
    <creator>root</creator>
    <defaultCategory></defaultCategory>
    <devicesRequired>true</devicesRequired>
    <contexts>,Port,Device,Groups,</contexts>
    <id>7044</id>
    <lastUpdateDate>1546553746527</lastUpdateDate>
    <lastUpdatedBy>zpala</lastUpdatedBy>
    <metaDataPath>/usr/local/Extreme_Networks/NetSight/appdata/scripting/overrides/Configure_Vlan_on_Port_-_Extreme-Cisco-Comware-Procurve.xml</metaDataPath>
    <miscXMLData></miscXMLData>
    <nosIds></nosIds>
    <postprocessScript></postprocessScript>
    <rollbackScript></rollbackScript>
    <saveConfigOnExit>false</saveConfigOnExit>
    <scriptOwner></scriptOwner>
    <scriptPath>/usr/local/Extreme_Networks/NetSight/appdata/scripting/overrides/Configure_Vlan_on_Port_-_Extreme-Cisco-Comware-Procurve.tcl</scriptPath>
    <scriptTimeout>60</scriptTimeout>
    <scriptType>TCL</scriptType>
    <supprotedGroups></supprotedGroups>
    <roles>,NetSight Administrator,</roles>
    <vendor></vendor>
    <version>0</version>
</script>

