<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<script name="Create L2VSN">
    <abortOnError>true</abortOnError>
    <auditLogEnabled></auditLogEnabled>
    <category>,Config,</category>
    <comments>Create L2VSN across any of VSP,XOS,ERS - v1.5</comments>
    <content>'''
This script is provided free of charge by Extreme. We hope such scripts are
helpful when used in conjunction with Extreme products and technology and can
be used as examples to modify and adapt for your ultimate requirements.
Extreme will not provide any official support for these scripts. If you do
have any questions or queries about any of these scripts you may post on
Extreme's community website "The Hub" (https://community.extremenetworks.com/)
under the scripting category.

ANY SCRIPTS PROVIDED BY EXTREME ARE HEREBY PROVIDED "AS IS", WITHOUT WARRANTY
OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL EXTREME OR ITS THIRD PARTY LICENSORS BE LIABLE FOR ANY CLAIM,
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE USE OR DISTRIBUTION OF SUCH
SCRIPTS.
'''
##########################################################
# Ludo Standard library; Version 2.11                    #
# Written by Ludovico Stevens, CSE Extreme Networks      #
##########################################################
Debug = False    # Enables debug messages
Sanity = False   # If enabled, config commands are not sent to host (show commands are operational)

##########################################################
try:
    emc_vars
    execution = 'xmc'
except: # If not running on XMC Jython...
    # These lines only needed to run XMC Python script locally
    # They can also be pasted to XMC, but will not execute
    import sys
    import json
    import java.util
    import emc_cli      # Own local replica
    import emc_nbi      # Own local replica
    import emc_results  # Own local replica
    execution = 'dev'
    if len(sys.argv) &gt; 1: # Json file as 1st argv
        emc_vars = json.load(open(sys.argv[1]))
    else:
        emc_vars = json.load(open('emc_vars.json'))
##########################################################

#
# IMPORTS:
#
import re
import subprocess
from java.util import LinkedHashMap

#
# VARIABLES:
#
RegexPrompt = re.compile('.*[\?\$%#&gt;]\s?$')
RegexError  = re.compile(
    '^%|\x07|error|invalid|cannot|unable|bad|not found|not exist|not allowed|no such|out of range|incomplete|failed|denied|can\'t|ambiguous|do not|unrecognized',
    re.IGNORECASE
)
RegexPort = re.compile('^(?:[1-9]\d{0,2}[/:])?\d+$')
RegexPortRange = re.compile('^(?:([1-9]\d{0,2})([/:]))?(\d+)-(?:([1-9]\d{0,2})[/:])?(\d+)$')
RegexStarRange = re.compile('^([1-9]\d{0,2})(:)\*$') # XOS only
RegexContextPatterns = { # Ported from acli.pl
    'ERS Series' : [
        re.compile('^(?:interface |router \w+$|route-map (?:\"[\w\d\s\.\+-]+\"|[\w\d\.-]+) \d+$|ip igmp profile \d+$|wireless|application|ipv6 dhcp guard policy |ipv6 nd raguard policy )'), # level0
        re.compile('^(?:security|crypto|ap-profile |captive-portal |network-profile |radio-profile )'), # level1
        re.compile('^(?:locale)'), # level2
    ],
    'VSP Series' : [
        re.compile('^ *(?:interface |router \w+$|router vrf|route-map (?:\"[\w\d\s\.\+-]+\"|[\w\d\.-]+) \d+$|application|i-sid \d+|wireless|logical-intf isis \d+|mgmt [\dcvo]|ovsdb$)'), # level0
        re.compile('^ *(?:route-map (?:\"[\w\d\s\.\+-]+\"|[\w\d\.-]+) \d+$)'), # level1
    ],
}
RegexExitInstance = re.compile('^ *(?:exit|back|end)(?:\s|$)')
Indent = 3 # Number of space characters for each indentation
LastError = None
ConfigHistory = []
RollbackStack = []
SlotPortRange = None # Gets set to dict by getSlotPortRanges()
FamilyChildren = { # Children will be rolled into parent family for these scripts
    'Extreme Access Series': 'VSP Series',
}
Family = None # This needs to get set by setFamily()

#
# FUNCTIONS:
#
def debug(debugOutput): # Use function to include debugging in script; set above Debug variable to True or False to turn on or off debugging
    if Debug:
        print debugOutput

def setFamily(): # Set global Family variable; automatically handles family children, as far as this script is concerned
    global Family
    if emc_vars["family"] in FamilyChildren:
        Family = FamilyChildren[emc_vars["family"]]
    else:
        Family = emc_vars["family"]
    print "Using family type '{}' for this script".format(Family)
    if not Family in CLI_Dict:
        raise RuntimeError('This scripts only supports family types: {}'.format(", ".join(list(CLI_Dict.keys()))))

def portValue(port): # Function to pass to sorted(key) to sort port lists
    slotPort = re.split('[/:]', port)
    if len(slotPort) == 2: # slot/port format
        idx = int(slotPort[0])*100 + int(slotPort[1])
    else: # standalone port (no slot)
        idx = int(slotPort[0])
    return idx

def cleanOutput(outputStr): # Remove echoed command and final prompt from output
    lastLine = outputStr.splitlines()[-1:][0]
    if RegexPrompt.match(lastLine):
        lines = outputStr.splitlines()[1:-1]
    else:
        lines = outputStr.splitlines()[1:]
    return '\n'.join(lines)

def configChain(chainStr): # Produces a list of a set of concatenated commands (either with ';' or newlines)
    chainStr = re.sub(r'\n(\w)(\n|\s*;|$)', chr(0) + r'\1\2', chainStr) # Mask trailing "\ny" or "\nn" on commands before making list
    cmdList = map(str.strip, re.split(r'[;\n]', chainStr))
    cmdList = filter(None, cmdList) # Filter out empty lines, if any
    cmdList = [re.sub(r'\x00(\w)(\n|$)', r'\n\1\2', x) for x in cmdList] # Unmask after list made
    return cmdList

def parseRegexInput(cmdRegexStr): # Parses input command regex for both sendCLI_showRegex() and xmcLinuxCommand()
    if re.match(r'\w+(?:-\w+)?://', cmdRegexStr):
        mode, cmdRegexStr = map(str.strip, cmdRegexStr.split('://', 1))
    else:
        mode = None
    cmd, regex = map(str.strip, cmdRegexStr.split('||', 1))
    cmdList = map(str.strip, cmd.split('&amp;'))
    return mode, cmdList, regex

def formatOutputData(data, mode): # Formats output data for both sendCLI_showRegex() and xmcLinuxCommand()
    if not mode                 : value = data                                   # Legacy behaviour same as list
    elif mode == 'bool'         : value = bool(data)                             # No regex capturing brackets required
    elif mode == 'str'          : value = str(data[0]) if data else None         # Regex should have 1 capturing bracket at most
    elif mode == 'str-lower'    : value = str(data[0]).lower() if data else None # Same as str but string made all lowercase
    elif mode == 'str-upper'    : value = str(data[0]).upper() if data else None # Same as str but string made all uppercase
    elif mode == 'int'          : value = int(data[0]) if data else None         # Regex must have 1 capturing bracket at most
    elif mode == 'list'         : value = data                                   # If &gt; 1 capturing brackets, will be list of tuples
    elif mode == 'list-reverse' : value = list(reversed(data))                   # Same as list but in reverse order
    elif mode == 'list-diagonal': value = [data[x][x] for x in range(len(data))] # Regex pat1|pat2 = list of tuples; want [0][0],[1][1],etc
    elif mode == 'tuple'        : value = data[0] if data else ()                # Regex &gt; 1 capturing brackets, returns 1st tuple
    elif mode == 'dict'         : value = dict(data)                             # Regex must have 2 capturing brackets exactly
    elif mode == 'dict-reverse' : value = dict(map(reversed, data))              # Same as dict, but key/values will be flipped
    elif mode == 'dict-both'    : value = dict(data), dict(map(reversed, data))  # Returns 2 dict: dict + dict-reverse
    elif mode == 'dict-diagonal': value = dict((data[x][x*2],data[x][x*2+1]) for x in range(len(data))) # {[0][0]:[0][1], [1][2]:[1][3], etc}
    else:
        RuntimeError("sendCLI_showRegex: invalid scheme type '{}'".format(mode))
    return value

def abortError(cmd, errorOutput): # A CLI command failed, before bombing out send any rollback commands which may have been set
    print "Aborting script due to error on previous command"
    rollbackStack()
    print "Aborting because this command failed: {}".format(cmd)
    raise RuntimeError(errorOutput)

def rollbackStack(): # Execute all commands on the rollback stack
    if RollbackStack:
        print "Applying rollback commands to undo partial config and return device to initial state"
        while RollbackStack:
            sendCLI_configChain(RollbackStack.pop(), True)

def rollbackCommand(cmd): # Add a command to the rollback stack; these commands will get popped and executed should we need to abort
    RollbackStack.append(cmd)
    cmdList = map(str.strip, re.split(r'[;\n]', cmd)) # cmd could be a configChain
    cmdList = [x for x in cmdList if x] # Weed out empty elements 
    cmdOneLiner = " / ".join(cmdList)
    print "Pushing onto rollback stack: {}\n".format(cmdOneLiner)

def rollBackPop(number=0): # Remove entries from RollbackStack
    global RollbackStack
    if number == 0:
        RollbackStack = []
        print "Rollback stack emptied"
    else:
        del RollbackStack[-number:]
        print "Rollback stack popped last {} entries".format(number)

def sendCLI_showCommand(cmd, returnCliError=False, msgOnError=None): # Send a CLI show command; return output
    global LastError
    resultObj = emc_cli.send(cmd)
    if resultObj.isSuccess():
        outputStr = cleanOutput(resultObj.getOutput())
        if outputStr and RegexError.search("\n".join(outputStr.split("\n")[:4])): # If there is output, check for error in 1st 4 lines only (timestamp banner might shift it by 3 lines)
            if returnCliError: # If we asked to return upon CLI error, then the error message will be held in LastError
                LastError = outputStr
                if msgOnError:
                    print "==&gt; Ignoring above error: {}\n\n".format(msgOnError)
                return None
            abortError(cmd, outputStr)
        LastError = None
        return outputStr
    else:
        raise RuntimeError(resultObj.getError())

def sendCLI_configCommand(cmd, returnCliError=False, msgOnError=None): # Send a CLI config command
    global LastError
    cmdStore = re.sub(r'\n.+$', '', cmd) # Strip added CR+y or similar
    if Sanity:
        print "SANITY&gt; {}".format(cmd)
        ConfigHistory.append(cmdStore)
        LastError = None
        return True
    resultObj = emc_cli.send(cmd)
    if resultObj.isSuccess():
        outputStr = cleanOutput(resultObj.getOutput())
        if outputStr and RegexError.search("\n".join(outputStr.split("\n")[:2])): # If there is output, check for error in 1st 2 lines only
            if returnCliError: # If we asked to return upon CLI error, then the error message will be held in LastError
                LastError = outputStr
                if msgOnError:
                    print "==&gt; Ignoring above error: {}\n\n".format(msgOnError)
                return False
            abortError(cmd, outputStr)
        ConfigHistory.append(cmdStore)
        LastError = None
        return True
    else:
        raise RuntimeError(resultObj.getError())

def sendCLI_configChain(chainStr, returnCliError=False, msgOnError=None): # Send a semi-colon separated list of config commands
    cmdList = configChain(chainStr)
    for cmd in cmdList:
        success = sendCLI_configCommand(cmd, returnCliError, msgOnError)
        if not success:
            return False
    return True

def appendConfigDotCfg(chainStr): # Appends config commands to config.cfg (before 'end' statement) to be executed after reboot
    if Family != 'VSP Series':
        raise RuntimeError('appendConfigDotCfg(): only supported with "VSP Series" family type')
    cmdList = configChain(chainStr)
    if Sanity:
        for cmd in cmdList:
            print "SANITY(appended to config.cfg)&gt; {}".format(cmd)
        ConfigHistory.append('[after reboot] ' + cmd)
        LastError = None
        return True
    # Edit config.cfg
    cmdStream = "edit config.cfg\n?end\nO" # Edit config, find 'end' from bottom of file, insert text above
    for cmd in cmdList:
        cmdStream += cmd + "\n"
    cmdStream += "\x1bZZ" # Escape edit mode and save file
    debug("appendConfigDotCfg() - cmdStream:\n{}".format(cmdStream))
    resultObj = emc_cli.send(cmdStream)
    if resultObj.isSuccess():
        outputStr = cleanOutput(resultObj.getOutput())
        if outputStr and RegexError.search("\n".join(outputStr.split("\n")[:2])): # If there is output, check for error in 1st 2 lines only
            abortError(cmd, outputStr)
        else:
            for cmd in cmdList:
                print "Added to config.cfg: {}".format(cmd)
                ConfigHistory.append('[after reboot] ' + cmd)
            LastError = None
            return True
    else:
        raise RuntimeError(resultObj.getError())

def sendCLI_showRegex(cmdRegexStr, debugKey=None, returnCliError=False, msgOnError=None): # Send show command and extract values from output using regex
    # cmdRegexStr format: &lt;type&gt;://&lt;cli-show-command&gt;||&lt;regex-with-capturing-brackets&gt;
    # Regex is by default case-sensitive; for case-insensitive include (?i) at beginning of regex on input string
    mode, cmdList, regex = parseRegexInput(cmdRegexStr)
    for cmd in cmdList:
        # If cmdList we try each command in turn until one works; we don't want to bomb out on cmds before the last one in the list
        ignoreCliError = True if len(cmdList) &gt; 1 and cmd != cmdList[-1] else returnCliError
        outputStr = sendCLI_showCommand(cmd, ignoreCliError, msgOnError)
        if outputStr:
            break
    if not outputStr: # returnCliError true
        return None
    data = re.findall(regex, outputStr, re.MULTILINE)
    debug("sendCLI_showRegex() raw data = {}".format(data))
    # Format we return data in depends on what '&lt;type&gt;://' was pre-pended to the cmd &amp; regex
    value = formatOutputData(data, mode)
    if Debug:
        if debugKey: debug("{} = {}".format(debugKey, value))
        else: debug("sendCLI_showRegex OUT = {}".format(value))
    return value

def nbiQuery(jsonQuery, returnKey, debugKey=None, returnKeyError=False): # Makes a GraphQl query of XMC NBI; if returnKey provided returns that key value, else return whole response
    response = emc_nbi.query(jsonQuery)
    if 'errors' in response: # Query response contains errors
        abortError("nbiQuery for {}".format(returnKey), response['errors'][0].message)

    if returnKey: # If a specific key requested, we find it
        def recursionKeySearch(nestedDict):
            for key, value in nestedDict.iteritems():
                if key == returnKey:
                    return True, value
                elif isinstance(value, (dict, LinkedHashMap)): # XMC Python is Jython where a dict is in fact a java.util.LinkedHashMap
                    foundKey, foundValue = recursionKeySearch(value)
                    if foundKey:
                        return True, foundValue
                return [None, None] # If we find nothing

        foundKey, returnValue = recursionKeySearch(response)
        if foundKey:
            if Debug:
                if debugKey: debug("{} = {}".format(debugKey, returnValue))
                else: debug("nbiQuery {} = {}".format(returnKey, returnValue))
            return returnValue
        if returnKeyError:
            return None
        # If requested key not found, raise error
        abortError("nbiQuery for {}".format(returnKey), 'Key "{}" was not found in query response'.format(returnKey))

    # Else, return the full response
    if Debug:
        if debugKey: debug("{} = {}".format(debugKey, response))
        else: debug("nbiQuery response = {}".format(response))
    return response

def nbiMutation(jsonQuery): # Makes a GraphQl mutation query of XMC NBI; returns true on success
    status = nbiQuery(jsonQuery, "status", "status", True)
    if status == "SUCCESS":
        return True
    else:
        return False

def xmcLinuxCommand(cmdRegexStr, debugKey=None): # Execute a command on XMC and recover the output
    mode, cmdList, regex = parseRegexInput(cmdRegexStr)
    cmd = cmdList[0] # We only support single shell command syntax for now
    cmdList = cmd.split(' ')
    if execution == 'dev': # I develop on my Windows laptop...
        cmdList[0] += '.bat'
    debug("xmcLinuxCommand about to execute : {}".format(cmd))
    try:
        outputStr = subprocess.check_output(cmdList)
    except Exception as e: # Expect OSError
        print "{}: {}".format(type(e).__name__, str(e))
        print "Error executing '{}' on XMC shell".format(cmd)
        return
    data = re.findall(regex, outputStr, re.MULTILINE)
    # Format we return data in depends on what '&lt;type&gt;://' was pre-pended to the cmd &amp; regex
    value = formatOutputData(data, mode)
    if Debug:
        if debugKey: debug("{} = {}".format(debugKey, value))
        else: debug("xmcLinuxCommand OUT = {}".format(value))
    return value

def getSlotPortRanges(): # Populates the SlotPortRange dict
    global SlotPortRange
    slotCommand = {'Summit Series': 'dict://show slot||^Slot-(\d+)\s+\S+\s+\S+\s+\S+\s+(\d+)'} # Only XOS supported
    if Family not in slotCommand:
        SlotPortRange = {}
        return
    SlotPortRange = sendCLI_showRegex(slotCommand[Family])
    debug("getSlotPortRanges = {}".format(SlotPortRange))

def generatePortList(portStr, debugKey=None): # Given a port list/range, validates it and returns an ordered port list with no duplicates (can also be used for VLAN-id ranges)
    # This version of this function will not handle port ranges which span slots; also does not handle VSP channelized ports
    debug("generatePortList IN = {}".format(portStr))
    portDict = {} # Use a dict, will ensure no port duplicate keys
    for port in portStr.split(','):
        port = re.sub(r'^[\s\(]+', '', port) # Remove leading spaces  [ or '(' ]
        port = re.sub(r'[\s\)]+$', '', port) # Remove trailing spaces [ or ')' =&gt; XMC bug on ERS standalone units]
        if not len(port): # Skip empty string
            continue
        rangeMatch = RegexPortRange.match(port)
        starMatch = RegexStarRange.match(port)
        if rangeMatch: # We have a range of ports
            startSlot = rangeMatch.group(1)
            separator = rangeMatch.group(2)
            startPort = int(rangeMatch.group(3))
            endSlot = rangeMatch.group(4)
            endPort = int(rangeMatch.group(5))
            if endSlot and startSlot != endSlot:
                print "ERROR! generatePortList no support for ranges spanning slots: {}".format(port)
            elif startPort &gt;= endPort:
                print "ERROR! generatePortList invalid range: {}".format(port)
            else: # WE are good
                for portCount in range(startPort, endPort + 1):
                    if startSlot: # slot-based range
                        portDict[startSlot + separator + str(portCount)] = 1
                    else: # simple port range (no slot info)
                        portDict[str(portCount)] = 1
        elif starMatch: # We have a slot/* range
            slot = starMatch.group(1)
            separator = starMatch.group(2)
            if SlotPortRange == None: # Structure not populated
                getSlotPortRanges()
            if SlotPortRange:
                if slot in SlotPortRange:
                    for portCount in range(1, int(SlotPortRange[slot]) + 1):
                        portDict[slot + separator + str(portCount)] = 1
                else:
                    print "Warning: no range for slot {}; skipping: {}".format(slot, port)
            else:
                print "Warning: generatePortList skipping star range as not supported on this switch type: {}".format(port)
        elif RegexPort.match(port): # Port is in valid format
            portDict[port] = 1
        else: # Port is in an invalid format; don't add to dict, print an error message, don't raise exception 
            print "Warning: generatePortList skipping unexpected port format: {}".format(port)

    # Sort and return the list as a comma separated string
    portList = sorted(portDict, key=portValue)

    if Debug:
        if debugKey: debug("{} = {}".format(debugKey, portList))
        else: debug("generatePortList OUT = {}".format(portList))
    return portList

def generatePortRange(portList, debugKey=None): # Given a list of ports, generates a compacted port list/range string for use on CLI commands
    # Ported from acli.pl; this version of this function only compacts ranges within same slot, and does not support VSP channelized ports
    debug("generatePortRange IN = {}".format(portList))
    rangeMode = {'VSP Series': 2, 'ERS Series': 1, 'Summit Series': 1}
    elementList = []
    elementBuild = None
    currentType = None
    currentSlot = None
    currentPort = None
    rangeLast = None

    # First off, sort the list
    portList = sorted(portList, key=portValue)
    for port in portList:
        slotPort = re.split("([/:])", port) # Split on '/' (ERS/VSP) or ':'(XOS)
        # slotPort[0] = slot / slotPort[1] = separator ('/' or ':') / slotPort[2] = port
        if len(slotPort) == 3: # slot/port
            if elementBuild:
                if currentType == 's/p' and slotPort[0] == currentSlot and slotPort[2] == str(int(currentPort)+1):
                    currentPort = slotPort[2]
                    if rangeMode[Family] == 1:
                        rangeLast = currentPort
                    else: # rangeMode = 2
                        rangeLast = currentSlot + slotPort[1] + currentPort
                    continue
                else: # Range complete
                    if rangeLast:
                        elementBuild += '-' + rangeLast
                    elementList.append(elementBuild)
                    elementBuild = None
                    rangeLast = None
                    # Fall through below
            currentType = 's/p'
            currentSlot = slotPort[0]
            currentPort = slotPort[2]
            elementBuild = port

        if len(slotPort) == 1: # simple port (no slot)
            if elementBuild:
                if currentType == 'p' and port == str(int(currentPort)+1):
                    currentPort = port
                    rangeLast = currentPort
                    continue
                else: # Range complete
                    if rangeLast:
                        elementBuild += '-' + rangeLast
                    elementList.append(elementBuild)
                    elementBuild = None
                    rangeLast = None
                    # Fall through below
            currentType = 'p'
            currentPort = port
            elementBuild = port

    if elementBuild: # Close off last element we were holding
        if rangeLast:
            elementBuild += '-' + rangeLast
        elementList.append(elementBuild)

    portStr = ','.join(elementList)
    if Debug:
        if debugKey: debug("{} = {}".format(debugKey, portStr))
        else: debug("generatePortRange OUT = {}".format(portStr))
    return portStr                

def ipToNumber(dottedDecimalStr): # Method to convert an IP/Mask dotted decimal address into a long number; can also use for checking validity of IP addresses
    try: # bytearray ensures that IP bytes are valid (1-255)
        ipByte = list(bytearray([int(byte) for byte in dottedDecimalStr.split('.')]))
    except:
        return None
    if len(ipByte) != 4:
        return None
    debug("ipByte = {}".format(ipByte))
    ipNumber = (ipByte[0]&lt;&lt;24) + (ipByte[1]&lt;&lt;16) + (ipByte[2]&lt;&lt;8) + ipByte[3]
    debug("dottedDecimalStr {} = ipNumber {}".format(dottedDecimalStr, hex(ipNumber)))
    return ipNumber

def numberToIp(ipNumber): # Method to convert a long number into an IP/Mask dotted decimal address
    dottedDecimalStr = '.'.join( [ str(ipNumber &gt;&gt; (i&lt;&lt;3) &amp; 0xFF) for i in range(4)[::-1] ] )
    debug("ipNumber {} = dottedDecimalStr {}".format(hex(ipNumber), dottedDecimalStr))
    return dottedDecimalStr

def maskToNumber(mask): # Method to convert a mask (dotted decimal or Cidr number) into a long number
    if re.match(r'^\d+$', mask): # Mask as number
        if int(mask) &gt; 0 and int(mask) &lt;= 32:
            maskNumber = (2**32-1) ^ (2**(32-int(mask))-1)
        else:
            maskNumber = None
    else:
        maskNumber = ipToNumber(mask)
    if maskNumber:
        debug("maskNumber = {}".format(hex(maskNumber)))
    return maskNumber

def subnetMask(ip, mask): # Return the IP subnet and Mask in dotted decimal and cidr formats for the provided IP address and mask
    ipNumber = ipToNumber(ip)
    maskNumber = maskToNumber(mask)
    subnetNumber = ipNumber &amp; maskNumber
    ipSubnet = numberToIp(subnetNumber)
    ipDottedMask = numberToIp(maskNumber)
    ipCidrMask = bin(maskNumber).count('1')
    debug("ipSubnet = {} / ipDottedMask = {} / ipCidrMask = {}".format(ipSubnet, ipDottedMask, ipCidrMask))
    return ipSubnet, ipDottedMask, ipCidrMask

def ipGateway(ip, mask, gw): # Return the gateway IP address, as first or last IP in subnet, based on own IP/mask
    ipNumber = ipToNumber(ip)
    maskNumber = maskToNumber(mask)
    subnetNumber = ipNumber &amp; maskNumber
    if gw == 'first':
        gwNumber = subnetNumber + 1
        ip1numb = gwNumber + 1
        ip2numb = gwNumber + 2
    elif gw == 'last':
        gwNumber = subnetNumber + 2**(32-int(mask)) - 2
        ip1numb = gwNumber - 2
        ip2numb = gwNumber - 1
    else: # Error condition
        raise RuntimeError('ipGateway(): invalid gw type {}'.format(gw))
    debug("gwNumber = {} / ip1numb = {} / ip2numb = {}".format(hex(gwNumber), hex(ip1numb), hex(ip2numb)))
    gatewayIP = numberToIp(gwNumber)
    ip1 = numberToIp(ip1numb)
    ip2 = numberToIp(ip2numb)
    debug("gatewayIP = {} / ip1 = {} / ip2 = {}".format(gatewayIP, ip1, ip2))
    return gatewayIP, ip1, ip2

def printConfigSummary(): # Print summary of all config commands executed with context indentation
    emc_cli.close()
    print "The following configuration was successfully performed on switch:"
    indent = ''
    level = 0
    if Family in RegexContextPatterns:
        maxLevel = len(RegexContextPatterns[Family])
    for cmd in ConfigHistory:
        if Family in RegexContextPatterns:
            if RegexContextPatterns[Family][level].match(cmd):
                print "-&gt; {}{}".format(indent, cmd)
                if level + 1 &lt; maxLevel:
                    level += 1
                indent = ' ' * Indent * level
                continue
            elif RegexExitInstance.match(cmd):
                if level &gt; 0:
                    level -= 1
                indent = ' ' * Indent * level
        print "-&gt; {}{}".format(indent, cmd)


#
# INIT: Init code
#
try:
    if emc_vars['userInput_sanity'] == 'Enable':
        Sanity = True
    elif emc_vars['userInput_sanity'] == 'Disable':
        Sanity = False
except:
    pass
try:
    if emc_vars['userInput_debug'] == 'Enable':
        Debug = True
    elif emc_vars['userInput_debug'] == 'Disable':
        Debug = False
except:
    pass


# --&gt; Insert Ludo Threads library here if required &lt;--


# --&gt; XMC Python script actually starts here &lt;--

##########################################################
# XMC Script: Create L2VSN (for device context menu)     #
# Written by Ludovico Stevens, CSE Extreme Networks      #
##########################################################
# Create a L2VSN across any of VOSS, EXOS, BOSS
# Written by Ludovico Stevens, CSE Extreme Networks

__version__ = '1.5'

# 1.5 - Changed CLI dict 'get_isid_uni_data' so that it can work on VSP8600 also (no CLI grep)
#     - Creating a service with no ports and no vlan was giving an error about tagging mode
#     - Was failing if ERS switch was not configured with vlan configcontrol automatic
#     - Updated libraries
#     - If the XOS already had a dynamic VLAN script was failing to convert that VLAN to static
#     - XOS has changed some CLI commands; modifications to be able to specify 2 or more syntaxes
#     - If input MLT ids provided would try and flex-uni enable all MLTs on switch

#
# XMC Metadata
#
'''
#@MetaDataStart
#@DetailDescriptionStart
######################################################################################
# 
# This script provisions a L2VSN between any Fabric Connect or Fabric Attach switch
# It works across all of VOSS VSPs (including in DVR Leaf mode), BOSS ERS and EXOS
#
# An I-SID must be provided.
#
# A service name can optionally be entered; if provided this will be assigned as VLAN
# name on CVLAN UNIs.
#
# The VLAN-id must normally be provided as well, either at the global level or at the
# device level (when a value is provided at both global and device level, the device
# level value will be used). The exception is when creating an untagged Switched-UNI
# service, in which case no VLAN-id value is required and any value provided will be
# ignored.
#
# The Port list is optional. If provided, the service will be terminated on the ports.
# Port syntax follows the same syntax you would use on the switch; comma separated
# lists of ports or ranges are allowed; range syntaxes are 1/1-1/5 on a VSP, 1/1-5 on
# an ERS and 1:1-5 or 1:* on an XOS. Port ranges spanning slots (e.g. 1/1-2/24 or
# 1:1-2:24) are currently not supported.
# The MLT id list is also optional. This will only work on VSPs and the script will
# expect to find the MLTs already created on the switch (i.e. this script will not
# create the MLTs, just configure a L2VSN end-point on them). MLTs will always be
# configured with Switched-UNI.
# If no Port list or MLT list is provided, the service will be created on the switch,
# globally but on no interfaces (this can be required when configuring a L2VSN on an
# SMLT-BEB pair, where the end-point is single attached to only one of the VSPs
# SMLT-BEBs; the other SMLT-BEB will need to have the same service termination or it
# will not work properly)
#
# If the device is a VSP which is capable of supporting Flex-uni, then this script will
# always provision Switched-UNI based services.
# If instead the device is an ERS or an XOS or an older VSP (not capable of supporting
# Flex-uni, then this script will provision a CVLAN-uni based service.
#
#######################################################################################
#@DetailDescriptionEnd

#@SectionStart (description = "Service Definition to create")
#    @VariableFieldLabel (
#        description = "SERVICE Id &amp;lt;100 - 15999999&amp;gt;",
#        type = string,
#        required = yes,
#        name = "userInput_isid",
#    )
#    @VariableFieldLabel (
#        description = "Service Name &amp;#40;VLAN Name&amp;#41;",
#        type = string,
#        required = no,
#        name = "userInput_vlanName",
#    )
#    @VariableFieldLabel (
#        description = "VLAN-id&amp;#44; can be overridden below at device level",
#        type = string,
#        required = no,
#        name = "userInput_vlanGlobal",
#    )
#    @VariableFieldLabel (
#        description = "Port list&amp;#44; can be overridden below at device level",
#        type = string,
#        required = no,
#        name = "userInput_portsGlobal",
#    )
#    @VariableFieldLabel (
#        description = "MLT id list &amp;#40;VSP only&amp;#41;&amp;#44; can be overridden below at device level",
#        type = string,
#        required = no,
#        name = "userInput_mltsGlobal",
#    )
#    @VariableFieldLabel (
#        description = "Tagging mode&amp;#44; can be overridden below at device level",
#        type = string,
#        required = no,
#        validValues = [tag,untag],
#        name = "userInput_tagGlobal",
#        value = "tag"
#    )
#@SectionEnd

#@SectionStart (description = "Device level Port and VLAN assignment to overrides above global values")
#    @VariableFieldLabel (
#        description = "Port&amp;#40;s&amp;#41;",
#        type = string,
#        required = no,
#        name = "userInput_ports",
#        scope = device
#    )
#    @VariableFieldLabel (
#        description = "MLT id&amp;#40;s&amp;#41;",
#        type = string,
#        required = no,
#        name = "userInput_mlts",
#        scope = device
#    )
#    @VariableFieldLabel (
#        description = "VLAN-id",
#        type = string,
#        required = no,
#        name = "userInput_vlan",
#        scope = device
#    )
#    @VariableFieldLabel (
#        description = "Tagging",
#        type = string,
#        required = no,
#        validValues = [tag,untag],
#        name = "userInput_tag",
#        scope = device
#    )
#@SectionEnd

#@SectionStart (description = "Sanity / Debug")
#    @VariableFieldLabel (
#        description = "Sanity: enable if you do not trust this script and wish to first see what it does. In sanity mode config commands are not executed",
#        type = string,
#        required = no,
#        validValues = [Enable, Disable],
#        name = "userInput_sanity",
#    )
#    @VariableFieldLabel (
#        description = "Debug: enable if you need to report a problem to the script author",
#        type = string,
#        required = no,
#        validValues = [Enable, Disable],
#        name = "userInput_debug",
#    )
#@SectionEnd
#@MetaDataEnd
'''

#
# Imports:
#


#
# Variables:
#
CLI_Dict = {
    'VSP Series': {
        'disable_more_paging'        : 'terminal more disable',
        'enable_context'             : 'enable',
        'config_context'             : 'config term',
        'exit_config_context'        : 'exit',
        'end_config'                 : 'end',
        'save_config'                : 'save config',
        'get_flex_uni'               : 'dict://show interfaces gigabitEthernet config {}||^(\d\/\d+)\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+(Enable|Disable)', # Port
        'get_mlt_flex_uni'           : 'dict://show mlt||^(\d+)\s+\d+\s+\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+(enable|disable)',
        'create_flex_uni'            : 'vlan members remove 1 {0}; interface gigabitEthernet {0}; flex-uni enable; no shutdown; exit', # Port
        'create_mlt_flex_uni'        : 'interface mlt {0}; flex-uni enable; exit', # MLT id
        'get_cvlan_name'             : 'str://show vlan basic {0}||^{0}\s+(\S+)\s', # VLAN id
        'create_cvlan'               : 'vlan create {0} type port-mstprstp 0', # {0} = VLAN id
        'get_cvlan_isid'             : 'str://show vlan i-sid {0}||^{0}\s+(\d+)', # VLAN id
        'set_cvlan_isid'             : 'vlan i-sid {0} {1}', # {0} = VLAN id; {1} = i-sid
        'set_cvlan_name'             : 'vlan name {0} {1}', # {0} = VLAN id; {1} = Name
        'create_cvlan_uni'           : { # {0} = VLAN id; {1} = port-list
            'tag'                    : 'interface gigabitEthernet {1}; encapsulation dot1q; exit; vlan members add {0} {1}',
            'untag'                  : 'interface gigabitEthernet {1}; no encapsulation dot1q; exit; vlan members add {0} {1}',
                                       },
        'get_isid_uni_data'          : 'show running-config module i-sid',
        'create_switched_isid'       : 'i-sid {0}', # {0} = i-sid
        'create_switched_uni'        : { # {0} = VLAN id; {1} = port-list
            'tag'                    : 'c-vid {0} port {1}',
            'untag'                  : 'untagged-traffic port {1}',
                                       },
        'create_mlt_switched_uni'    : { # {0} = VLAN id; {1} = MLT-id
            'tag'                    : 'c-vid {0} mlt {1}',
            'untag'                  : 'untagged-traffic mlt {1}',
                                       },
        'delete_switched_uni'        : { # {0} = i-sid; {1} = VLAN id; {2} = port-list
            'tag'                    : 'i-sid {0}; no c-vid {1} port {2}; exit',
            'untag'                  : 'i-sid {0}; no untagged-traffic port {2}; exit',
            'transparent'            : 'i-sid {0}; no port {2}; exit'
                                       },
        'delete_mlt_switched_uni'    : { # {0} = i-sid; {1} = VLAN id; {2} = MLT id
            'tag'                    : 'i-sid {0}; no c-vid {1} mlt {2}; exit',
            'untag'                  : 'i-sid {0}; no untagged-traffic mlt {2}; exit',
            'transparent'            : 'i-sid {0}; no mlt {2}; exit'
                                       },
    },
    'Summit Series': {
        'disable_more_paging'        : 'disable clipaging',
        'save_config'                : 'save configuration',
        'get_cvlan_name'             : 'str://show vlan||^(\S+)\s+{0}\s', # VLAN id
        'create_cvlan'               : 'create vlan {0}', # {0} = VLAN id
        'get_cvlan_isid'             : 'str://show vlan {0} fabric attach assignments &amp; show fabric attach vlan {0} assignments||^\s+{0}\s+\S+\s+(?:Static|Dynamic)\s+(\d+)', # VLAN id
        'set_cvlan_isid'             : 'configure vlan {0} add isid {1}', # {0} = VLAN id; {1} = i-sid 
        'set_cvlan_name'             : 'configure vlan {0} name {1}', # {0} = VLAN id; {1} = Name
        'create_cvlan_uni'           : { # {0} = VLAN id; {1} = port-list
            'tag'                    : 'configure vlan {0} add ports {1} tagged',
            'untag'                  : 'configure vlan {0} add ports {1} untagged',
                                       },
    },
    'ERS Series': {
        'disable_more_paging'        : 'terminal length 0',
        'enable_context'             : 'enable',
        'config_context'             : 'config term',
        'end_config'                 : 'end',
        'save_config'                : 'copy config nvram',
        'get_vlan_configcontrol'     : 'str-lower://show vlan configcontrol||VLAN Control:\s+(\S+)',
        'get_cvlan_name'             : 'str://show vlan||^{0}\s+(\S.+\S)\s+Port', # VLAN id
        'set_vlan_configcontrol'     : 'vlan configcontrol {}', # Mode
        'create_cvlan'               : 'vlan create {0} type port', # {0} = VLAN id
        'get_cvlan_isid'             : 'str://show vlan i-sid {0}||^{0}\s+(\d+)', # VLAN id
        'set_cvlan_isid'             : 'i-sid {1} vlan {0}', # {0} = VLAN id; {1} = i-sid 
        'set_cvlan_name'             : 'vlan name {0} {1}', # {0} = VLAN id; {1} = Name
        'create_cvlan_uni'           : { # {0} = VLAN id; {1} = port-list
            'tag'                    : 'vlan ports {1} tagging tagAll; vlan members add {0} {1}',
            'untag'                  : 'vlan ports {1} tagging untagAll; vlan members add {0} {1}',
                                       },
    },
}

#
# Functions:
#
def getIsidUniStruct(isid): # Extract all port members of an I-SID
    # Only supported for family = 'VSP Series'
    # the "show i-sid" command is too fiddly to scrape...
    # the "show interfaces gigabitEthernet i-sid" command does not show I-SIDs with no ports assigned...
    # so we use "show run module i-sid" instead...
    cliOutput = sendCLI_showCommand(CLI_Dict[Family]['get_isid_uni_data'].format(isid))
    isidPorts = {}
    foundIsidData = False
    for line in cliOutput.splitlines():
        if foundIsidData:
            matchObj = re.match(r'c-vid (\d+) (port|mlt) (\S+)', line)
            if matchObj:
                tagging = 'tag'
                cvlan = matchObj.group(1)
                btype = matchObj.group(2)
                if btype == 'port':
                    ports = matchObj.group(3)
                    mlt = None
                else:
                    ports = None
                    mlt = matchObj.group(3)
            else:
                matchObj = re.match(r'untagged-traffic (port|mlt) (\S+)', line)
                if matchObj:
                    tagging = 'untag'
                    cvlan = None
                    btype = matchObj.group(1)
                    if btype == 'port':
                        ports = matchObj.group(2)
                        mlt = None
                    else:
                        ports = None
                        mlt = matchObj.group(2)
                else:
                    matchObj = re.match(r'(port|mlt) (\S+)', line)
                    if matchObj:
                        tagging = 'transparent'
                        cvlan = None
                        btype = matchObj.group(1)
                        if btype == 'port':
                            ports = matchObj.group(2)
                            mlt = None
                        else:
                            ports = None
                            mlt = matchObj.group(2)
                    elif re.match(r'exit', line):
                        break # We come out!
                    else:
                        continue
            if ports:
                portList = generatePortList(ports)
                debug("portList = {}".format(portList))
                for port in portList:
                    isidPorts[port] = {'type': tagging, 'vlan': cvlan}
            if mlt:
                isidPorts[mlt] = {'type': tagging, 'vlan': cvlan}

        elif re.match(r'^i-sid {} '.format(isid), line):
            isidPorts['exists'] = True
            foundIsidData = True
            continue
        else: # Other line, skip
            continue

    debug("getIsidUniStruct OUT = {}".format(isidPorts))
    return isidPorts


def main():
    print "Create L2VSN version {}".format(__version__)
    setFamily() # Sets global Family variable

    isid      = emc_vars["userInput_isid"].strip()
    try:
        vlanName = emc_vars["userInput_vlanName"].strip()
    except:
        vlanName = None
    try:
        vlanGb = emc_vars["userInput_vlanGlobal"].strip()
    except:
        vlanGb = None
    try:
        portsGb = emc_vars["userInput_portsGlobal"].strip()
    except:
        portsGb = None
    try:
        mltsGb = emc_vars["userInput_mltsGlobal"].strip()
    except:
        mltsGb = None
    try:
        taggingGb = emc_vars["userInput_tagGlobal"]
    except:
        taggingGb = None
    try:
        vlanDv = emc_vars["userInput_vlan"].strip()
    except:
        vlanDv = None
    try:
        portsDv = emc_vars["userInput_ports"].strip()
    except:
        portsDv = None
    try:
        mltsDv = emc_vars["userInput_mlts"].strip()
    except:
        mltsDv = None
    try:
        taggingDv = emc_vars["userInput_tag"]
    except:
        taggingDv = None

    print "Information provided by User:"
    print " Global settings:"
    print " - I-SID = {}".format(isid)
    print " - VLAN Name = {}".format(vlanName)
    print " - Global VLAN = {}".format(vlanGb)
    print " - Global Ports = {}".format(portsGb)
    print " - Global MLT ids = {}".format(mltsGb)
    print " - Global Tagging mode = {}".format(taggingGb)
    print " Device override settings:"
    print " - VLAN = {}".format(vlanDv)
    print " - Ports = {}".format(portsDv)
    print " - MLT ids = {}".format(mltsDv)
    print " - Tagging mode = {}".format(taggingDv)

    # I-SID validation
    if not isid.isdigit() or int(isid) &gt; 15999999:
        raise RuntimeError('Invalid I-SID value {}; needs to be a number not higher than 15999999'.format(isid))

    # VLAN name validation
    if vlanName and re.search(r'\s', vlanName):
        raise RuntimeError('Invalid VLAN Name "{}"; must not contain any spaces'.format(vlanName))

    # Determine VLAN, Ports and tagging to use
    if taggingDv:
        tagging = taggingDv
    elif taggingGb:
        tagging = taggingGb
    else:
        tagging = 'tag'

    if vlanDv:
        vlan = vlanDv
    elif vlanGb:
        vlan = vlanGb
    else:
        vlan = None
    if vlan and (not vlan.isdigit() or int(vlan) &gt; 4095):
        raise RuntimeError('Invalid VLAN id value {}; needs to be a number not higher than 4059'.format(vlan))

    if portsDv:
        ports = portsDv
    elif portsGb:
        ports = portsGb
    else:
        ports = None

    if ports and not vlan and tagging == 'tag':
        raise RuntimeError('VLAN-id must be provided for tagged termination !!')

    if mltsDv:
        if Family != 'VSP Series':
            raise RuntimeError('This script only supports MLT ids with VOSS VSPs; not with {}'.format(Family))
        mlts = mltsDv
    elif mltsGb:
        if Family == 'VSP Series':
            mlts = mltsGb
        else:
            print 'MLTs not supported on family "{}"; resetting to None'.format(Family)
            mlts = None
    else:
        mlts = None
    if mlts:
        mltList = generatePortList(mlts)
    else:
        mltList = []
    debug("mltList = {}".format(mltList))
    for mlt in mltList:
        if not mlt.isdigit() or int(mlt) &gt; 512:
            raise RuntimeError('Invalid MLT id value {}; needs to be a number not higher than 512'.format(mlt))

    # Disable more paging (generatePortList might issue a CLI command, so do this before)
    sendCLI_showCommand(CLI_Dict[Family]['disable_more_paging'])

    # Obtain ports in list and range format
    if ports:
        portList = generatePortList(ports)
        portRange = generatePortRange(portList)
    else:
        portList = []
        portRange = ''
    debug("portList = {}".format(portList))
    debug("portRange = {}".format(portRange))

    # Enter privExec, for show commands
    if 'enable_context' in CLI_Dict[Family]:
        sendCLI_showCommand(CLI_Dict[Family]['enable_context'])

    # Determine what type of L2VSN we need to create
    flexUniList = None
    flexMltUniList = None
    if 'get_flex_uni' in CLI_Dict[Family]:
        flexUniList = sendCLI_showRegex(CLI_Dict[Family]['get_flex_uni'].format(portRange), 'flexUniList')
    if mltList:
        flexMltUniList = sendCLI_showRegex(CLI_Dict[Family]['get_mlt_flex_uni'], 'flexMltUniList')
        for mlt in mltList:
            if mlt not in flexMltUniList.keys():
                raise RuntimeError('Entered MLT id {} does not exist on switch; this script can only terminate L2VSNs on already existing MLTs'.format(mlt))

    if flexUniList or flexMltUniList: # This case will apply only to recent VSPs supporting Flex-uni
        uni = 'create_switched_uni'
    else: # ERS, XOS and older VSPs not supporting Flex-uni
        uni = 'create_cvlan_uni'
    debug("uni = {}".format(uni))

    # Some extra validation
    if not vlan and tagging == 'untag' and uni == 'create_cvlan_uni':
        raise RuntimeError('VLAN-id must be provided for CVLAN untagged termination !!')
    if vlan and tagging == 'untag' and uni == 'create_switched_uni':
        # User entered a VLAN value, but we don't need one and we need to check against existing bindings using this value
        # We don't want this desired value to match against existing bindings, further down, so we clear it now to None 
        vlan = None

    # Pre-checks before entering config mode
    if uni == 'create_cvlan_uni':
        if 'get_vlan_configcontrol' in CLI_Dict[Family]:
            vlanCfgCtrl = sendCLI_showRegex(CLI_Dict[Family]['get_vlan_configcontrol'], 'vlanCfgCtrl')
        else:
            vlanCfgCtrl = None
        vlanExistName = sendCLI_showRegex(CLI_Dict[Family]['get_cvlan_name'].format(vlan), 'vlanExistName')
        vlanIsid = None
        if vlanExistName:
            if not vlanName and Family == 'Summit Series' and re.match(r'SYS_VLAN_', vlanExistName): # The VLAN already exists on the XOS but is a dynamic VLAN
                vlanName = 'L2VSN_VLAN_' + vlan
            vlanIsid = sendCLI_showRegex(CLI_Dict[Family]['get_cvlan_isid'].format(vlan), 'vlanIsid')
            if vlanIsid and vlanIsid != isid:
                raise RuntimeError('VLAN {} is already assigned to I-SID {} which is different from requested I-SID {}'.format(vlan, vlanIsid, isid))

    else: # 'create_switched_uni'
        portsToConfigure = []
        mltsToConfigure = []
        if portList or mltList:
            isidPorts = getIsidUniStruct(isid)
            debug("isidPorts = {}".format(isidPorts))

        if portList:
            flexUniDisabledList = [x for x in flexUniList.keys() if flexUniList[x] == 'Disable']
            debug("flexUniDisabledList = {}".format(flexUniDisabledList))
            if flexUniDisabledList:
                flexUniEnablePortRange = generatePortRange(flexUniDisabledList)
                print "Selected ports where we need to enable flex-uni = {}".format(flexUniDisabledList)
            portsInIsidToRemove = [x for x in portList if x in isidPorts.keys() and isidPorts[x]['vlan'] != vlan]
            debug("portsInIsidToRemove = {}".format(portsInIsidToRemove))
            if portsInIsidToRemove:
                print "Selected ports already configured in same I-SID but with wrong c-vid/tagging mode = {}".format(portsInIsidToRemove)

            # If one of the user selected ports happens to be already assigned to the I-SID and C-VID already, then we filter out these ports
            portsToConfigure = [x for x in portList if ( x not in isidPorts.keys() ) or ( x in isidPorts.keys() and isidPorts[x]['vlan'] != vlan )]
            debug("portsToConfigure = {}".format(portsToConfigure))

        if mltList:
            flexMltUniDisabledList = [x for x in flexMltUniList.keys() if x in mltList and flexMltUniList[x] == 'disable']
            debug("flexMltUniDisabledList = {}".format(flexMltUniDisabledList))
            if flexMltUniDisabledList:
                print "MLT ids where we need to enable flex-uni = {}".format(flexMltUniDisabledList)
            mltsInIsidToRemove = [x for x in mltList if x in isidPorts.keys() and isidPorts[x]['vlan'] != vlan]
            debug("mltsInIsidToRemove = {}".format(mltsInIsidToRemove))
            if mltsInIsidToRemove:
                print "MLTs selected already configured in same I-SID but with wrong c-vid/tagging mode = {}".format(mltsInIsidToRemove)

            # If one of the user selected ports happens to be already assigned to the I-SID and C-VID already, then we filter out these ports
            mltsToConfigure = [x for x in mltList if ( x not in isidPorts.keys() ) or ( x in isidPorts.keys() and isidPorts[x]['vlan'] != vlan )]
            debug("mltsToConfigure = {}".format(mltsToConfigure))

        if (portList or mltList) and not portsToConfigure and not mltsToConfigure:
            if portList:
                print 'Ports {} are already assigned to I-SID {}'.format(portRange, isid)
            if mltList:
                print 'MLT ids {} are already assigned to I-SID {}'.format(mltList, isid)
            return # Not an error (service is already in place)

        # Update port &amp; MLTs to configure
        if portsToConfigure:
            portRange = generatePortRange(portsToConfigure)
            print "Effective ports we need to configure = {}".format(portRange)
        if mltsToConfigure:
            print "Effective MLT ids we need to configure = {}".format(mltsToConfigure)


    # Enter config mode now
    if 'config_context' in CLI_Dict[Family]:
        sendCLI_configCommand(CLI_Dict[Family]['config_context'])

    # CVLAN and Switched-UNI cases dealt separately
    if uni == 'create_cvlan_uni':
        if vlanCfgCtrl and vlanCfgCtrl != 'automatic':
            sendCLI_configCommand(CLI_Dict[Family]['set_vlan_configcontrol'].format('automatic'))
        if not vlanExistName:
            # Create CVLAN
            sendCLI_configCommand(CLI_Dict[Family]['create_cvlan'].format(vlan))
        if vlanName and (not vlanExistName or (vlanExistName and vlanName.lower() != vlanExistName.lower())): # XOS gives error if you try and configure same name on same VLAN
            sendCLI_configCommand(CLI_Dict[Family]['set_cvlan_name'].format(vlan, vlanName))
        if not vlanIsid:
            # Assign I-SID to CVLAN
            sendCLI_configCommand(CLI_Dict[Family]['set_cvlan_isid'].format(vlan, isid))
        if portList:
            # Assign ports to CVLAN
            sendCLI_configChain(CLI_Dict[Family][uni][tagging].format(vlan, portRange))
        if vlanCfgCtrl and vlanCfgCtrl != 'automatic':
            sendCLI_configCommand(CLI_Dict[Family]['set_vlan_configcontrol'].format(vlanCfgCtrl))

    else: # 'create_switched_uni'
        if portList:
            if flexUniDisabledList:
                # Enable flex-uni on ports which are not already flex-uni enabled
                sendCLI_configChain(CLI_Dict[Family]['create_flex_uni'].format(flexUniEnablePortRange))
            if portsInIsidToRemove:
                for port in portsInIsidToRemove:
                    # Delete any of the selected ports which might happen to have already been configured in same I-SID but different c-vid
                    sendCLI_configChain(CLI_Dict[Family]['delete_switched_uni'][isidPorts[port]['type']].format(isid, isidPorts[port]['vlan'], port))

        if mltList:
            if flexMltUniDisabledList:
                # Enable flex-uni on MLTs which are not already flex-uni enabled
                for mlt in flexMltUniDisabledList:
                    sendCLI_configChain(CLI_Dict[Family]['create_mlt_flex_uni'].format(mlt))
            if mltsInIsidToRemove:
                for mlt in mltsInIsidToRemove:
                    # Delete any of the selected MLT ids which might happen to have already been configured in same I-SID but different c-vid
                    sendCLI_configChain(CLI_Dict[Family]['delete_mlt_switched_uni'][isidPorts[mlt]['type']].format(isid, isidPorts[mlt]['vlan'], mlt))

        # Create/enter I-SID context
        sendCLI_configCommand(CLI_Dict[Family]['create_switched_isid'].format(isid))
        if portsToConfigure:
            # Assign ports to I-SID
            sendCLI_configCommand(CLI_Dict[Family]['create_switched_uni'][tagging].format(vlan, portRange))
        if mltsToConfigure:
            # Assign MLT ids to I-SID
            for mlt in mltsToConfigure:
                sendCLI_configCommand(CLI_Dict[Family]['create_mlt_switched_uni'][tagging].format(vlan, mlt))
        # Exit I-SID context
        sendCLI_configCommand(CLI_Dict[Family]['exit_config_context'])

    # End and save config
    if 'end_config' in CLI_Dict[Family]:
        sendCLI_configCommand(CLI_Dict[Family]['end_config'])
    sendCLI_configCommand(CLI_Dict[Family]['save_config'])

    # Print summary of config performed
    printConfigSummary()

main()
</content>
    <creationDate>1537273649994</creationDate>
    <creator>lstevens</creator>
    <defaultCategory></defaultCategory>
    <devicesRequired>true</devicesRequired>
    <contexts>,Device,Groups,</contexts>
    <lastUpdateDate>1588418232067</lastUpdateDate>
    <lastUpdatedBy>lstevens</lastUpdatedBy>
    <miscXMLData></miscXMLData>
    <nosIds></nosIds>
    <postprocessScript></postprocessScript>
    <rollbackScript></rollbackScript>
    <saveConfigOnExit>false</saveConfigOnExit>
    <scriptOwner></scriptOwner>
    <scriptTimeout>60</scriptTimeout>
    <scriptType>Python</scriptType>
    <supprotedGroups></supprotedGroups>
    <roles>,NetSight Administrator,</roles>
    <vendor></vendor>
    <version>0</version>
</script>

