<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<script name="Fabric Cluster Create">
    <auditLogEnabled></auditLogEnabled>
    <cacheDate>1557733140331</cacheDate>
    <category>,Fabric Connect,</category>
    <comments>Creates a SMLT cluster (VOSS/Fabric Engine) with vIST</comments>
    <content>'''
Python Scripts provided by Extreme Networks.

This script is provided free of charge by Extreme. We hope such scripts are
helpful when used in conjunction with Extreme products and technology;
however, scripts are provided simply as an accommodation and are not
supported nor maintained by Extreme.  ANY SCRIPTS PROVIDED BY EXTREME ARE
HEREBY PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL EXTREME OR ITS
THIRD PARTY LICENSORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
IN CONNECTION WITH THE USE OR DISTRIBUTION OF SUCH SCRIPTS.

This script vastly uses functions and logic taken from Ludo Standard Library v1.7

This script creates a SMLT cluster (VOSS/Fabric Engine) with vIST.
'''

try:
    emc_vars
except: # If not running on XMC Jython...
    raise RuntimeError('This script must be used within Site Engine')

# IMPORTS
import re

# VARIABLES:
Debug = False
Sanity = False
RegexPrompt = re.compile('.*[\?\$%#&gt;]\s?$')
RegexError  = re.compile(
    '^%|\x07|error|invalid|cannot|unable|bad|not found|not exist|not allowed|no such|already exist|must be|out of range|incomplete|failed|denied|can\'t|ambiguous|do not|unrecognized',
    re.IGNORECASE
)
RegexPort = re.compile('^(?:[1-9]\d?[/:])?\d+$')
RegexPortRange = re.compile('^(?:([1-9]\d?)([/:]))?(\d+)-(?:([1-9]\d?)[/:])?(\d+)$')
RegexContextPatterns = { # Ported from acli.pl
    'ERS Series' : [
        re.compile('^(?:interface |router \w+$|route-map (?:\"[\w\d\s\.\+-]+\"|[\w\d\.-]+) \d+$|ip igmp profile \d+$|wireless|application|ipv6 dhcp guard policy |ipv6 nd raguard policy )'), # level0
        re.compile('^(?:security|crypto|ap-profile |captive-portal |network-profile |radio-profile )'), # level1
        re.compile('^(?:locale)'), # level2
    ],
    'VSP Series' : [
        re.compile('^ *(?:interface |router \w+$|router vrf|route-map (?:\"[\w\d\s\.\+-]+\"|[\w\d\.-]+) \d+$|application|i-sid \d+|wireless|logical-intf isis \d+|mgmt [\dcvo]|ovsdb$)'), # level0
        re.compile('^ *(?:route-map (?:\"[\w\d\s\.\+-]+\"|[\w\d\.-]+) \d+$)'), # level1
    ],
}
RegexExitInstance = re.compile('^ *(?:exit|back|end)(?:\s|$)')
Indent = 3 # Number of space characters for each indentation
LastError = None
ConfigHistory = []

def cleanOutput(outputStr): # Remove echoed command and final prompt from output
    lastLine = outputStr.splitlines()[-1:][0]
    if RegexPrompt.match(lastLine):
        lines = outputStr.splitlines()[1:-1]
    else:
        lines = outputStr.splitlines()[1:]
    return '\n'.join(lines)

def sendCLI_showCommand(cmd, returnCliError=False, msgOnError=None): # Send a CLI show command; return output
    global LastError
    resultObj = emc_cli.send(cmd)
    if resultObj.isSuccess():
        outputStr = cleanOutput(resultObj.getOutput())
        if outputStr and RegexError.search("\n".join(outputStr.split("\n")[:2])): # If there is output, check for error in 1st 2 lines only
            if returnCliError: # If we asked to return upon CLI error, then the error message will be held in LastError
                LastError = outputStr
                if msgOnError:
                    print "==&gt; Ignoring above error: {}\n\n".format(msgOnError)
                return None
            raise RuntimeError(outputStr)
        else:
            LastError = None
            return outputStr
    else:
        raise RuntimeError(resultObj.getError())

def sendCLI_configCommand(cmd, returnCliError=False, msgOnError=None): # Send a CLI config command
    global LastError
    if Sanity:
        print "SANITY&gt; {}".format(cmd)
        ConfigHistory.append(cmd)
        LastError = None
        return True
    resultObj = emc_cli.send(cmd)
    if resultObj.isSuccess():
        outputStr = cleanOutput(resultObj.getOutput())
        if outputStr and RegexError.search("\n".join(outputStr.split("\n")[:2])): # If there is output, check for error in 1st 2 lines only
            if returnCliError: # If we asked to return upon CLI error, then the error message will be held in LastError
                LastError = outputStr
                if msgOnError:
                    print "==&gt; Ignoring above error: {}\n\n".format(msgOnError)
                return False
            raise RuntimeError(outputStr)
        else:
            ConfigHistory.append(cmd)
            LastError = None
            return True
    else:
        raise RuntimeError(resultObj.getError())

def sendCLI_configChain(chainStr, returnCliError=False, msgOnError=None): # Send a semi-colon separated list of config commands
    cmds = map(str.strip, re.split(r'[;\n]', chainStr))
    for cmd in cmds:
        if len(cmd): # Skip empty lines
            success = sendCLI_configCommand(cmd, returnCliError, msgOnError)
            if not success:
                return False
    return True

def sendCLI_showRegex(cmdRegexStr): # Send show command and extract values from output using regex
    cmd, regex = map(str.strip, cmdRegexStr.split('|', 1))
    outputStr = sendCLI_showCommand(cmd)
    # We return a list of captured output; if nothing was matched an empty list is returned
    return re.findall(regex, outputStr, re.MULTILINE)

def sendConfigCmds(cmds, returnCliError=False, msgOnError=None): # Send a list of config commands
    for cmd in cmds:
        if len(cmd): # Skip empty lines
            success = sendCLI_configCommand(cmd, returnCliError, msgOnError)
            if not success:
                return False
    return True


# --&gt; XMC Python script actually starts here &lt;--

##########################################################
# XMC Script: Creates a SMLT cluster (VOSS/Fabric Engine) with vIST     #
# Written by Stephane Grosjean, PSE Extreme Networks     #
##########################################################

__version__ = '0.2'

#
# XMC Metadata
#


#@MetaDataStart
#@DetailDescriptionStart
######################################################################################
# 
# This script creates a SMLT cluster (VOSS/Fabric Engine) with vIST.
# 
#######################################################################################
#@DetailDescriptionEnd

#@SectionStart (description = "Service Definition to create")
#    @VariableFieldLabel (description = "vIST VLAN Id &lt;1 - 4094&gt;",
#                     type = string,
#                     required = yes,
#                     readOnly = no,
#                     name = "vist",
#                     value = "4000"
#                     )

#    @VariableFieldLabel (description = "vIST Service Id &lt;1 - 16000000&gt;",
#                     type = string,
#                     required = yes,
#                     readOnly = no,
#                     name = "visid",
#                     value = "10004000"
#                     )

#    @VariableFieldLabel (description = "SMLT Virtual BMAC",
#                     type = string,
#                     required = yes,
#                     readOnly = no,
#                     name = "vbmac",
#                     value = "02:51:00:79:58:81"
#                     )

#    @VariableFieldLabel (description = "SMLT LACP",
#                     type = string,
#                     required = yes,
#                     validValues = [yes,no],
#                     readOnly = no,
#                     name = "lacp",
#                     value = "no"
#                     )
#@SectionEnd

#@SectionStart (description = "vIST Peer specific data")
#    @VariableFieldLabel (description = "vIST Local IP",
#                     type = string,
#                     required = yes,
#                     readOnly = no,
#                     name = "localip",
#                     value = "10.1.1.1/30",
#                     scope = device
#                     )

#    @VariableFieldLabel (description = "vIST Peer IP",
#                     type = string,
#                     required = yes,
#                     readOnly = no,
#                     name = "peerip",
#                     value = "10.1.1.2",
#                     scope = device
#                     )

#    @VariableFieldLabel (description = "SMLT Peer System Id",
#                     type = string,
#                     required = yes,
#                     readOnly = no,
#                     name = "peersysid",
#                     value = "0051.00d2.8084",
#                     scope = device
#                     )
#@SectionEnd
#@MetaDataEnd

SPBMID = "1"

def checkSysId():
    localsysid = sendCLI_showRegex('show isis system-id|^\w+\.\w+\.\w+')

    if localsysid[0] == emc_vars["peersysid"]:
        return False
        
    return True

def checkVlanNsi(vid, nsi):
    sendCLI_showCommand('enable')
    vlans = sendCLI_showRegex('show running-config module vlan|^vlan\screate\s(\d+)\s')
    isids = sendCLI_showRegex('show running-config module vlan|^vlan\si-sid\s\d+\s(\d+)')

    for vlan in vlans:
        if vlan == vid:
            return None
    for isid in isids:
        if isid == nsi:
            return None
 
    return True

def isISISenable():
    isis_state = sendCLI_showRegex('show isis|AdminState\s:\s(\w+)')

    if isis_state[0] == "enabled":
        return True
        
    return False



def main():
    routerISIS = False

    family = emc_vars["family"]
    if family != "VSP Series" and family != "Universal Platform Fabric Engine" and family!= "Universal Platform VOSS":
        raise RuntimeError('Error: This script needs to be executed on a switch running VOSS/Fabric Engine')

    if int(emc_vars["vist"]) &gt; 4094 or int(emc_vars["vist"]) &lt; 2:
        raise RuntimeError('Error: VLAN Id is out of range')
    if int(emc_vars["visid"]) &gt; 16000000 or int(emc_vars["visid"]) &lt; 1:
        raise RuntimeError('Error: Service Id is out of range')
    if len(emc_vars["vbmac"].split(':')) != 6:
        raise RuntimeError('Error: The virtual BMac is not valid. It must be in the form of aa:bb:cc:dd:ee:ff')
    if '/' not in emc_vars["localip"]:
        raise RuntimeError('Error: The vIST Local IP must have a netmask defined in the form /xx')
    
    if '/' in emc_vars["peerip"]:
        s = emc_vars["peerip"].split('/')
        if len(s.split('.')) != 4:
            raise runtimeError('Error: The Peer IP address is invalid')
        emc_vars["peerip"] = s[0]

    if checkSysId() is False:
        raise RuntimeError('Error: The Peer System-Id cannot be the same than the local System-Id')
        
    if checkVlanNsi(emc_vars["vist"], emc_vars["visid"]) is None:
        raise RuntimeError('Error: The Vlan Id or Service Id for the vIST vlan already exists')
    
    cmds = ["enable", "configure terminal"]
    
    if isISISenable():
        cmds.append("no router isis enable\ny")
        routerISIS = True
    
    cmds.append("router isis")
    cmds.append("spbm {} smlt-virtual-bmac {}".format(SPBMID, emc_vars["vbmac"]))
    cmds.append("spbm {} smlt-peer-system-id {}".format(SPBMID, emc_vars["peersysid"]))
    cmds.append("exit")
    
    cmds.append("vlan create {} name vIST type port-mstprstp 0".format(emc_vars["vist"]))
    cmds.append("vlan i-sid {} {}".format(emc_vars["vist"], emc_vars["visid"]))
    cmds.append("interface vlan {}".format(emc_vars["vist"]))
    cmds.append("ip address {}".format(emc_vars["localip"]))
    cmds.append("exit")
    cmds.append("virtual-ist peer-ip {} vlan {}".format(emc_vars["peerip"], emc_vars["vist"]))
    
    if emc_vars["lacp"] == "yes":
        cmds.append("lacp smlt-sys-id {}".format(emc_vars["vbmac"]))
        cmds.append("lacp enable")
    
    if routerISIS:
        cmds.append("router isis enable\ny")
    
    result = sendConfigCmds(cmds)
    if result is None:
        return
        
        
main()</content>
    <creationDate>1557733140318</creationDate>
    <creator>root</creator>
    <defaultCategory></defaultCategory>
    <devicesRequired>true</devicesRequired>
    <contexts>,Device,</contexts>
    <id>168</id>
    <lastUpdateDate>1683967014069</lastUpdateDate>
    <lastUpdatedBy>root</lastUpdatedBy>
    <metaDataPath>/usr/local/Extreme_Networks/NetSight/appdata/scripting/overrides/Fabric_Cluster_Create.xml</metaDataPath>
    <miscXMLData></miscXMLData>
    <nosIds>,nos-id-voss,nos-id-fabric-engine,</nosIds>
    <postprocessScript></postprocessScript>
    <rollbackScript></rollbackScript>
    <saveConfigOnExit>false</saveConfigOnExit>
    <scriptOwner></scriptOwner>
    <scriptPath>/usr/local/Extreme_Networks/NetSight/appdata/scripting/overrides/Fabric_Cluster_Create.py</scriptPath>
    <scriptTimeout>60</scriptTimeout>
    <scriptType>Python</scriptType>
    <supprotedGroups></supprotedGroups>
    <roles>,XIQ-SE Administrator,</roles>
    <vendor></vendor>
    <version>0</version>
</script>

