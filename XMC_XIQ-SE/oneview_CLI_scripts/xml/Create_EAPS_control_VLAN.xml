<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<script name="Create EAPS control VLAN">
    <version>0</version>
    <comments>Will create EAPS protected vlan and add to the ring ports</comments>
    <content>#@METADATASTART
#@DetailDescriptionStart
################################################################################
# Community maintained CLI Scripting Library
#
# Script        : Create EAPS Control VLAN and add it to the EAPS ring ports. 
#
# Revision      : 1.0
# Last updated  : 13.12.2017
# Purpose       : Create EAPS Control VLAN and add it to the EAPS ring ports
# Devices	    : XOS 15.3 and newer
#
################################################################################
#@DetailDescriptionEnd

# @ScriptDescription "Basic script for vlan assignment. Please see Script View tab for details."
# @SectionStart ( description = "Provide your input please.")

# @VariableFieldLabel (description = "EAPS ring name",
#    type       = String,
#    scope      = global,
#    required   = yes
#    )
set var EAPSNAME ""

# @VariableFieldLabel (description = "VLAN name mandatory",
#    type       = String,
#    scope      = global,
#    required   = yes
#    )
set var VLANNAME ""


# @VariableFieldLabel (description   = "VLAN ID (tag) if the vlan does not exist", 
#    type       = String,
#    required   = no,
#    scope      = global
#    )
set var VLANID ""

# @VariableFieldLabel (description   = "Save the config after?",
#    type       = String,
#    scope      = global,
#    required   = yes,
#    validValues=[yes,no]
#    )
set var SAVECONFIG "no"

# @SectionEnd
# @MetaDataEnd

################################################################################
#    Here starts the magic
################################################################################

proc ExtractPort {line} {
	set BEGINING [string first "port:" $line 0]
	set ENDING [string first "Port status:" $line 0]
	incr BEGINING 5
	incr ENDING -1
	while {[string index $line $BEGINING] == " " } {
			 incr BEGINING
			}
	while {[string index $line $ENDING] == " " } {
			 incr ENDING -1
			}
	return [string range $line $BEGINING $ENDING]
}

proc EXOSPortConfig {NameOfPort vlanname egress} {
	IF ($egress == "untagged" ) THEN
        puts "### Lets check if there is a vlan on the port already! ###"
        CLI show ports $NameOfPort information detail | include Internal
        set COUTPUT $CLI_OUT
		set COMMA [string first "," $COUTPUT 0]
        set COLUMN [string first "Name:" $COUTPUT 0]
        incr COLUMN 6
        incr COMMA -1
        set VLANONPORT [string range $COUTPUT $COLUMN $COMMA]
        IF ($VLANONPORT != "" ) THEN
            puts "### Lets remove assigned VLAN from the port first! ###"
            CLI configure vlan $VLANONPORT delete ports $NameOfPort
        ENDIF
        puts "### Lets add the VLAN to the port. ###"
        CLI configure vlan $vlanname add ports $NameOfPort untagged
        regexp {.*Adding EAPS ring ports to a VLAN could cause a loop.*} ${CLI.OUT} foundWarning6
        IF ([info exists foundWarning6]) THEN
          CLI yes
        ENDIF
	ELSE
        puts "### Lets add the VLAN to the port. ###"
        CLI configure vlan $vlanname add ports $NameOfPort tagged
        regexp {.*Adding EAPS ring ports to a VLAN could cause a loop.*} ${CLI.OUT} foundWarning5
        IF ([info exists foundWarning5]) THEN
          CLI yes
        ENDIF
        
	ENDIF
}

IF ($vendor =="Extreme" ) THEN
        puts "### Does the EAPS ring exist? ###"
        CLI show eaps $EAPSNAME | include $EAPSNAME
		regexp {.*Invalid input detected at.*} ${CLI.OUT} foundWarning10
		IF ([info exists foundWarning10]) THEN
			   puts "### The EAPS $EAPSNAME does not exist! ###"
			   puts "### Dying now. ###"
			   Die
		ENDIF
        puts "### Does the vlan exist already? ###"
        CLI show vlan "$VLANNAME" | include \"name $VLANNAME \"
        regexp {.*Invalid input detected at.*} ${CLI.OUT} foundWarning1
        regexp {.*Ambiguous command.*} ${CLI.OUT} foundWarning1
        set records [split $CLI.OUT "\n"]
        set var I 0
        set var VLANEXISTS "NO"
        foreach line $records {
            IF ($I &gt; 0) THEN
                IF ([string first " name $VLANNAME" $line 0] != -1) THEN
                    set VLANEXISTS "YES"
                ENDIF
            ENDIF
            incr I
        }
        IF ($VLANEXISTS == "NO" || [info exists foundWarning1]) THEN
            puts "### VLAN does not exist. Is the vlan ID used? ###"
            CLI show vlan tag $VLANID
            regexp {.*tag is not configured for any.*} ${CLI.OUT} foundWarning2
            IF ([info exists foundWarning2]) THEN
                puts "### Lets create the VLAN. ###"
                CLI create vlan $VLANNAME tag $VLANID
            ELSE
               puts "### VLAN $VLANNAME does not exist but ID $VLANID is already used! ###"
               puts "### Dying now. ###"
               Die
            ENDIF		
        ENDIF
        puts "### What are the ring ports? ###"
        CLI show eaps $EAPSNAME | include \"Port status: \"
        set content $CLI.OUT
        set records [split $content "\n"]
        set var TEMP ""
        set var HIT 0
        set var PRIMARYPORT ""
        set var SECONDARYPORT ""
        foreach line $records {
            set HIT [string first "Primary" $line]
            IF ($HIT != -1 ) THEN
                set PRIMARYPORT [ ExtractPort $line ]
            ENDIF
            set HIT [string first "Secondary" $line]
            IF ($HIT != -1 ) THEN
                set SECONDARYPORT [ ExtractPort $line ]
            ENDIF
        }
        puts "### Lets add the control VLAN ###"
        CLI configure eaps $EAPSNAME add control vlan $VLANNAME
        puts "### Lets add the contorl VLAN to ring port ###"
        EXOSPortConfig $PRIMARYPORT $VLANNAME tagged
        puts "### Lets add the contorl VLAN to ring port ###"
        EXOSPortConfig $SECONDARYPORT $VLANNAME tagged
        IF ($SAVECONFIG == "yes" ) THEN
          puts "### Lets save the config as was requested. ###"
          CLI save
        ENDIF
        puts "### Have a nice day! ###"
        PerformSync -device $deviceIP -scope VLAN
        PerformSync -device $deviceIP -scope EapsDomain
ENDIF
</content>
    <creator>root</creator>
    <supprotedGroups></supprotedGroups>
    <auditLogEnabled></auditLogEnabled>
    <saveConfigOnExit>false</saveConfigOnExit>
    <devicesRequired>true</devicesRequired>
    <scriptTimeout>60</scriptTimeout>
    <defaultCategory></defaultCategory>
    <scriptOwner></scriptOwner>
    <rollbackScript></rollbackScript>
    <postprocessScript></postprocessScript>
    <miscXMLData></miscXMLData>
    <creationDate>1513172676534</creationDate>
    <category>,EAPS,</category>
    <vendor></vendor>
    <scriptType>TCL</scriptType>
    <metaDataPath>/usr/local/Extreme_Networks/NetSight/appdata/scripting/overrides/Create_EAPS_control_VLAN.xml</metaDataPath>
    <scriptPath>/usr/local/Extreme_Networks/NetSight/appdata/scripting/overrides/Create_EAPS_control_VLAN.tcl</scriptPath>
    <roles>,NetSight Administrator,</roles>
    <lastUpdatedBy>root</lastUpdatedBy>
    <lastUpdateDate>1513177332756</lastUpdateDate>
    <contexts>,Groups,Device,</contexts>
</script>

