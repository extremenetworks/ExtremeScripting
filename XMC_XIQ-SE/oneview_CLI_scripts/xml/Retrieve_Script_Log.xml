<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<script name="Retrieve Script Log">
    <abortOnError>true</abortOnError>
    <auditLogEnabled></auditLogEnabled>
    <category>,System,</category>
    <comments>Retrieve Log of Scripts run in the past - v1.0</comments>
    <content>'''
This script is provided free of charge by Extreme. We hope such scripts are
helpful when used in conjunction with Extreme products and technology and can
be used as examples to modify and adapt for your ultimate requirements.
Extreme will not provide any official support for these scripts. If you do
have any questions or queries about any of these scripts you may post on
Extreme's community website "The Hub" (https://community.extremenetworks.com/)
under the scripting category.

ANY SCRIPTS PROVIDED BY EXTREME ARE HEREBY PROVIDED "AS IS", WITHOUT WARRANTY
OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL EXTREME OR ITS THIRD PARTY LICENSORS BE LIABLE FOR ANY CLAIM,
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE USE OR DISTRIBUTION OF SUCH
SCRIPTS.
'''

# --&gt; Insert here script description, version and metadata &lt;--

##########################################################
# XMC Script: Retrieve Script Log                        #
# Written by Ludovico Stevens, TME Extreme Networks      #
##########################################################

__version__ = '1.0'

'''
#@MetaDataStart
#@DetailDescriptionStart
#######################################################################################
# 
# This script does for XMC scripts what Workflow Dashboard does for workflows.
# Once the script window is closed, it is hard to go back and see the script output
# (one has to go and look to XMC's Linux file system).
# To find a past script log, simply run this script against the switch (or switches)
# where the seeked script was previously executed.
# If no inputs are provided the script will list all script logs which were executed
# against the same switch IP, together with the relative timestamp.
# Once spotted the desired log, simply hit Back, enter the script name and timestamp
# and run again. If only 1 matching script log is found, then the script log is dumped
# in the script window.
# If no sript logs are found then this script intentionally raises an exception
# so as to get a red cross next to the device indicating no hit
#
#######################################################################################
#@DetailDescriptionEnd
# ( = &amp;#40;
# ) = &amp;#41;
# , = &amp;#44;
# &lt; = &amp;lt;
# &gt; = &amp;gt;
#@SectionStart (description = "Search Criteria")
#    @VariableFieldLabel (
#        description = "Script Name",
#        type = string,
#        required = no,
#        name = "userInput_scriptName",
#    )
#    @VariableFieldLabel (
#        description = "Time stamp",
#        type = string,
#        required = no,
#        name = "userInput_timeStamp",
#    )
#@SectionEnd
#@SectionStart (description = "Debug")
#    @VariableFieldLabel (
#        description = "Debug: enable if you need to report a problem to the script author",
#        type = string,
#        required = no,
#        validValues = [Enable, Disable],
#        name = "userInput_debug",
#    )
#@SectionEnd
#@MetaDataEnd
'''



##########################################################
# Ludo Standard library; Version 3.00                    #
# Written by Ludovico Stevens, TME Extreme Networks      #
##########################################################
Debug = False    # Enables debug messages

##########################################################
try:
    emc_vars
    execution = 'xmc'
except: # If not running on XMC Jython...
    # These lines only needed to run XMC Python script locally (on my laptop)
    # They can also be pasted to XMC, but will not execute
    import sys
    import json
    import java.util
    import emc_cli      # Own local replica
    import emc_nbi      # Own local replica
    import emc_results  # Own local replica
    execution = 'dev'
    if len(sys.argv) &gt; 1: # Json file as 1st argv
        emc_vars = json.load(open(sys.argv[1]))
    else:
        emc_vars = json.load(open('emc_vars.json'))
##########################################################

#
# IMPORTS:
#
import re
import glob
import os
import time

#
# VARIABLES:
#
TimeOffset = 2 # To make sure we have a timestamp which preceeeds the log file of this script
StartTime = time.time() - TimeOffset
ScriptLogPath = '/usr/local/Extreme_Networks/NetSight/appdata/logs/scripting/'

#
# FUNCTIONS:
#
def debug(debugOutput): # Use function to include debugging in script; set above Debug variable to True or False to turn on or off debugging
    if Debug:
        print debugOutput

def exitError(errorOutput): # Exit script with error message and setting status appropriately
    emc_results.setStatus(emc_results.Status.ERROR)
    raise RuntimeError(errorOutput)

def scriptName(): # Returns the assigned name of the Script or Workflow
    name = None
    if 'workflowName' in emc_vars: # Workflow
        name = emc_vars['workflowName']
    elif 'javax.script.filename' in emc_vars: # Script
        nameMatch = re.search(r'\/([^\/\.]+)\.py$', emc_vars['javax.script.filename'])
        name = nameMatch.group(1) if nameMatch else None
    return name

#
# INIT: Init Debug &amp; Sanity flags based on input combos
#
try:
    if emc_vars['userInput_debug'].lower() == 'enable':
        Debug = True
    elif emc_vars['userInput_debug'].lower() == 'disable':
        Debug = False
except:
    pass


#
# Main:
#
def main():
    thisScript = scriptName()
    print "{} version {} on XMC version {}".format(thisScript, __version__, emc_vars["serverVersion"])

    #
    # Obtain Inputs
    #
    deviceIp = emc_vars["deviceIP"]
    userName = emc_vars["userName"]
    myScriptLogPath = ScriptLogPath + userName + '/*.txt'
    try:
        script = emc_vars["userInput_scriptName"].strip()
    except:
        script = None
    try:
        timeStamp = emc_vars["userInput_timeStamp"].strip()
    except:
        timeStamp = None

    print "Information provided by User:"
    print " - Script Name = {}".format(script)
    print " - Device execution IP = {}".format(deviceIp)
    print " - Time Stamp to match = {}".format(timeStamp)
    print
    print "====================================================================="

    hitList = []
    deleteList = []
    fileList = glob.glob(myScriptLogPath)
    for log in fileList:
        lineCount = 0
        name = None
        time = None
        ip = None
        with open(log, 'r') as f:
            debug("-&gt; reading file = {}".format(log))
            while lineCount &lt; 5:
                lineCount += 1
                line = f.readline()
                debug("line = {}".format(line))
                nameMatch = re.match(r'Script Name: +(.+) *', line)
                if nameMatch:
                    name = nameMatch.group(1)
                    nameUnderscores = name.replace(' ', '_')
                    debug("name = {}".format(name))
                    continue
                timeMatch = re.match(r'Date and Time: +(.+) *', line)
                if timeMatch:
                    time = timeMatch.group(1)
                    debug("time = {}".format(time))
                    continue
                ipMatch = re.match(r'IP: +(.+) *', line)
                if ipMatch:
                    ip = ipMatch.group(1)
                    debug("ip = {}".format(ip))
                    continue
        if deviceIp == ip:
            if nameUnderscores == thisScript:
                stamp = os.path.getmtime(log)
                debug("StartTime = {}".format(StartTime))
                debug("stamp of log file = {}".format(stamp))
                if StartTime &gt; stamp:
                    debug("adding to delete list = {}".format(log))
                    deleteList.append(log)
            elif script and timeStamp:
                if script == name and re.search(re.escape(timeStamp), time):
                    hitList.append((name, ip, time, log))
            elif script:
                if script == name:
                    hitList.append((name, ip, time, log))
            elif timeStamp:
                if re.search(re.escape(timeStamp), time):
                    hitList.append((name, ip, time, log))
            else:
                hitList.append((name, ip, time, log))
    debug("hitList = {}".format(hitList))

    if len(hitList) == 1:
        with open(hitList[0][3]) as f:
            print f.read()
    elif len(hitList) &gt; 1:
        print "Found these matching log files:"
        for logTpl in hitList:
            print "{} : {} - {}".format(logTpl[0], logTpl[1], logTpl[2])

    for log in deleteList:
        debug("deleting log file = {}".format(log))
        os.remove(log)

    if not hitList:
        exitError("No matching logs found !")

main()
</content>
    <creationDate>1616106344569</creationDate>
    <creator>lstevens</creator>
    <defaultCategory></defaultCategory>
    <devicesRequired>true</devicesRequired>
    <encoded>true</encoded>
    <contexts>,Groups,Device,</contexts>
    <lastUpdateDate>1619441540271</lastUpdateDate>
    <lastUpdatedBy>lstevens</lastUpdatedBy>
    <miscXMLData></miscXMLData>
    <nosIds></nosIds>
    <postprocessScript></postprocessScript>
    <rollbackScript></rollbackScript>
    <saveConfigOnExit>false</saveConfigOnExit>
    <scriptOwner></scriptOwner>
    <scriptTimeout>60</scriptTimeout>
    <scriptType>Python</scriptType>
    <supprotedGroups></supprotedGroups>
    <roles>,NetSight Administrator,</roles>
    <vendor></vendor>
    <version>0</version>
</script>

